<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="966" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="949.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="949.00"> </text><svg id="frames" x="10" width="1180" total_samples="759"><g><title>[libc.so.6] (2 samples, 0.26%)</title><rect x="0.0000%" y="869" width="0.2635%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.26%)</title><rect x="0.2635%" y="869" width="0.2635%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="2"/><text x="0.5135%" y="879.50"></text></g><g><title>shmr2::vfs::block::VirtualBlock::open_handles (1 samples, 0.13%)</title><rect x="0.5270%" y="869" width="0.1318%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="1"/><text x="0.7770%" y="879.50"></text></g><g><title>shmr2::vfs::path::VirtualPath::resolve (1 samples, 0.13%)</title><rect x="0.6588%" y="869" width="0.1318%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="1"/><text x="0.9088%" y="879.50"></text></g><g><title>[[heap]] (7 samples, 0.92%)</title><rect x="0.0000%" y="885" width="0.9223%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="7"/><text x="0.2500%" y="895.50"></text></g><g><title>std::fs::OpenOptions::_open (1 samples, 0.13%)</title><rect x="0.7905%" y="869" width="0.1318%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="1"/><text x="1.0405%" y="879.50"></text></g><g><title>&lt;&amp;mut serde_yaml::de::DeserializerFromEvents as serde::de::Deserializer&gt;::deserialize_seq (1 samples, 0.13%)</title><rect x="0.9223%" y="869" width="0.1318%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="1"/><text x="1.1723%" y="879.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.13%)</title><rect x="1.0540%" y="869" width="0.1318%" height="15" fill="rgb(228,23,34)" fg:x="8" fg:w="1"/><text x="1.3040%" y="879.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.13%)</title><rect x="1.1858%" y="869" width="0.1318%" height="15" fill="rgb(218,30,26)" fg:x="9" fg:w="1"/><text x="1.4358%" y="879.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="1.3175%" y="869" width="0.1318%" height="15" fill="rgb(220,122,19)" fg:x="10" fg:w="1"/><text x="1.5675%" y="879.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.13%)</title><rect x="1.4493%" y="869" width="0.1318%" height="15" fill="rgb(250,228,42)" fg:x="11" fg:w="1"/><text x="1.6993%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.13%)</title><rect x="1.5810%" y="869" width="0.1318%" height="15" fill="rgb(240,193,28)" fg:x="12" fg:w="1"/><text x="1.8310%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.13%)</title><rect x="1.5810%" y="853" width="0.1318%" height="15" fill="rgb(216,20,37)" fg:x="12" fg:w="1"/><text x="1.8310%" y="863.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.13%)</title><rect x="1.5810%" y="837" width="0.1318%" height="15" fill="rgb(206,188,39)" fg:x="12" fg:w="1"/><text x="1.8310%" y="847.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.13%)</title><rect x="1.5810%" y="821" width="0.1318%" height="15" fill="rgb(217,207,13)" fg:x="12" fg:w="1"/><text x="1.8310%" y="831.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (2 samples, 0.26%)</title><rect x="1.7128%" y="869" width="0.2635%" height="15" fill="rgb(231,73,38)" fg:x="13" fg:w="2"/><text x="1.9628%" y="879.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.40%)</title><rect x="1.9763%" y="869" width="0.3953%" height="15" fill="rgb(225,20,46)" fg:x="15" fg:w="3"/><text x="2.2263%" y="879.50"></text></g><g><title>shmr2::vfs::path::VirtualPath::resolve (1 samples, 0.13%)</title><rect x="2.3715%" y="869" width="0.1318%" height="15" fill="rgb(210,31,41)" fg:x="18" fg:w="1"/><text x="2.6215%" y="879.50"></text></g><g><title>std::path::PathBuf::push (1 samples, 0.13%)</title><rect x="2.3715%" y="853" width="0.1318%" height="15" fill="rgb(221,200,47)" fg:x="18" fg:w="1"/><text x="2.6215%" y="863.50"></text></g><g><title>std::path::PathBuf::_push (1 samples, 0.13%)</title><rect x="2.3715%" y="837" width="0.1318%" height="15" fill="rgb(226,26,5)" fg:x="18" fg:w="1"/><text x="2.6215%" y="847.50"></text></g><g><title>std::ffi::os_str::OsString::push (1 samples, 0.13%)</title><rect x="2.3715%" y="821" width="0.1318%" height="15" fill="rgb(249,33,26)" fg:x="18" fg:w="1"/><text x="2.6215%" y="831.50"></text></g><g><title>std::sys::os_str::bytes::Buf::push_slice (1 samples, 0.13%)</title><rect x="2.3715%" y="805" width="0.1318%" height="15" fill="rgb(235,183,28)" fg:x="18" fg:w="1"/><text x="2.6215%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.13%)</title><rect x="2.3715%" y="789" width="0.1318%" height="15" fill="rgb(221,5,38)" fg:x="18" fg:w="1"/><text x="2.6215%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.13%)</title><rect x="2.3715%" y="773" width="0.1318%" height="15" fill="rgb(247,18,42)" fg:x="18" fg:w="1"/><text x="2.6215%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.13%)</title><rect x="2.3715%" y="757" width="0.1318%" height="15" fill="rgb(241,131,45)" fg:x="18" fg:w="1"/><text x="2.6215%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.13%)</title><rect x="2.3715%" y="741" width="0.1318%" height="15" fill="rgb(249,31,29)" fg:x="18" fg:w="1"/><text x="2.6215%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.13%)</title><rect x="2.3715%" y="725" width="0.1318%" height="15" fill="rgb(225,111,53)" fg:x="18" fg:w="1"/><text x="2.6215%" y="735.50"></text></g><g><title>std::fs::OpenOptions::_open (1 samples, 0.13%)</title><rect x="2.5033%" y="869" width="0.1318%" height="15" fill="rgb(238,160,17)" fg:x="19" fg:w="1"/><text x="2.7533%" y="879.50"></text></g><g><title>std::sys::pal::unix::fs::File::open_c (3 samples, 0.40%)</title><rect x="2.6350%" y="869" width="0.3953%" height="15" fill="rgb(214,148,48)" fg:x="20" fg:w="3"/><text x="2.8850%" y="879.50"></text></g><g><title>[[stack]] (17 samples, 2.24%)</title><rect x="0.9223%" y="885" width="2.2398%" height="15" fill="rgb(232,36,49)" fg:x="7" fg:w="17"/><text x="1.1723%" y="895.50">[..</text></g><g><title>std::sys::pal::unix::fs::stat (1 samples, 0.13%)</title><rect x="3.0303%" y="869" width="0.1318%" height="15" fill="rgb(209,103,24)" fg:x="23" fg:w="1"/><text x="3.2803%" y="879.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.13%)</title><rect x="3.1621%" y="869" width="0.1318%" height="15" fill="rgb(229,88,8)" fg:x="24" fg:w="1"/><text x="3.4121%" y="879.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.13%)</title><rect x="3.2938%" y="869" width="0.1318%" height="15" fill="rgb(213,181,19)" fg:x="25" fg:w="1"/><text x="3.5438%" y="879.50"></text></g><g><title>open64 (1 samples, 0.13%)</title><rect x="3.4256%" y="869" width="0.1318%" height="15" fill="rgb(254,191,54)" fg:x="26" fg:w="1"/><text x="3.6756%" y="879.50"></text></g><g><title>shmr2::vfs::block::VirtualBlock::open_handles (1 samples, 0.13%)</title><rect x="3.5573%" y="869" width="0.1318%" height="15" fill="rgb(241,83,37)" fg:x="27" fg:w="1"/><text x="3.8073%" y="879.50"></text></g><g><title>&lt;shmr2::vfs::path::VirtualPath as core::clone::Clone&gt;::clone (1 samples, 0.13%)</title><rect x="3.5573%" y="853" width="0.1318%" height="15" fill="rgb(233,36,39)" fg:x="27" fg:w="1"/><text x="3.8073%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.13%)</title><rect x="3.5573%" y="837" width="0.1318%" height="15" fill="rgb(226,3,54)" fg:x="27" fg:w="1"/><text x="3.8073%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.13%)</title><rect x="3.5573%" y="821" width="0.1318%" height="15" fill="rgb(245,192,40)" fg:x="27" fg:w="1"/><text x="3.8073%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.13%)</title><rect x="3.5573%" y="805" width="0.1318%" height="15" fill="rgb(238,167,29)" fg:x="27" fg:w="1"/><text x="3.8073%" y="815.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.13%)</title><rect x="3.5573%" y="789" width="0.1318%" height="15" fill="rgb(232,182,51)" fg:x="27" fg:w="1"/><text x="3.8073%" y="799.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.13%)</title><rect x="3.5573%" y="773" width="0.1318%" height="15" fill="rgb(231,60,39)" fg:x="27" fg:w="1"/><text x="3.8073%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.13%)</title><rect x="3.5573%" y="757" width="0.1318%" height="15" fill="rgb(208,69,12)" fg:x="27" fg:w="1"/><text x="3.8073%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.13%)</title><rect x="3.5573%" y="741" width="0.1318%" height="15" fill="rgb(235,93,37)" fg:x="27" fg:w="1"/><text x="3.8073%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1 samples, 0.13%)</title><rect x="3.5573%" y="725" width="0.1318%" height="15" fill="rgb(213,116,39)" fg:x="27" fg:w="1"/><text x="3.8073%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.13%)</title><rect x="3.5573%" y="709" width="0.1318%" height="15" fill="rgb(222,207,29)" fg:x="27" fg:w="1"/><text x="3.8073%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.13%)</title><rect x="3.5573%" y="693" width="0.1318%" height="15" fill="rgb(206,96,30)" fg:x="27" fg:w="1"/><text x="3.8073%" y="703.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.13%)</title><rect x="3.5573%" y="677" width="0.1318%" height="15" fill="rgb(218,138,4)" fg:x="27" fg:w="1"/><text x="3.8073%" y="687.50"></text></g><g><title>__rdl_alloc (1 samples, 0.13%)</title><rect x="3.5573%" y="661" width="0.1318%" height="15" fill="rgb(250,191,14)" fg:x="27" fg:w="1"/><text x="3.8073%" y="671.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.13%)</title><rect x="3.5573%" y="645" width="0.1318%" height="15" fill="rgb(239,60,40)" fg:x="27" fg:w="1"/><text x="3.8073%" y="655.50"></text></g><g><title>[anon] (5 samples, 0.66%)</title><rect x="3.1621%" y="885" width="0.6588%" height="15" fill="rgb(206,27,48)" fg:x="24" fg:w="5"/><text x="3.4121%" y="895.50"></text></g><g><title>shmr2::vfs::block::VirtualBlock::sync_data (1 samples, 0.13%)</title><rect x="3.6891%" y="869" width="0.1318%" height="15" fill="rgb(225,35,8)" fg:x="28" fg:w="1"/><text x="3.9391%" y="879.50"></text></g><g><title>[ld-linux-x86-64.so.2] (14 samples, 1.84%)</title><rect x="6.3241%" y="805" width="1.8445%" height="15" fill="rgb(250,213,24)" fg:x="48" fg:w="14"/><text x="6.5741%" y="815.50">[..</text></g><g><title>[ld-linux-x86-64.so.2] (10 samples, 1.32%)</title><rect x="6.8511%" y="789" width="1.3175%" height="15" fill="rgb(247,123,22)" fg:x="52" fg:w="10"/><text x="7.1011%" y="799.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.40%)</title><rect x="7.7734%" y="773" width="0.3953%" height="15" fill="rgb(231,138,38)" fg:x="59" fg:w="3"/><text x="8.0234%" y="783.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.26%)</title><rect x="7.9051%" y="757" width="0.2635%" height="15" fill="rgb(231,145,46)" fg:x="60" fg:w="2"/><text x="8.1551%" y="767.50"></text></g><g><title>_dl_catch_exception (6 samples, 0.79%)</title><rect x="8.1686%" y="805" width="0.7905%" height="15" fill="rgb(251,118,11)" fg:x="62" fg:w="6"/><text x="8.4186%" y="815.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.79%)</title><rect x="8.1686%" y="789" width="0.7905%" height="15" fill="rgb(217,147,25)" fg:x="62" fg:w="6"/><text x="8.4186%" y="799.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.79%)</title><rect x="8.1686%" y="773" width="0.7905%" height="15" fill="rgb(247,81,37)" fg:x="62" fg:w="6"/><text x="8.4186%" y="783.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.79%)</title><rect x="8.1686%" y="757" width="0.7905%" height="15" fill="rgb(209,12,38)" fg:x="62" fg:w="6"/><text x="8.4186%" y="767.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4 samples, 0.53%)</title><rect x="8.4321%" y="741" width="0.5270%" height="15" fill="rgb(227,1,9)" fg:x="64" fg:w="4"/><text x="8.6821%" y="751.50"></text></g><g><title>[ld-linux-x86-64.so.2] (40 samples, 5.27%)</title><rect x="3.8208%" y="885" width="5.2701%" height="15" fill="rgb(248,47,43)" fg:x="29" fg:w="40"/><text x="4.0708%" y="895.50">[ld-li..</text></g><g><title>[ld-linux-x86-64.so.2] (39 samples, 5.14%)</title><rect x="3.9526%" y="869" width="5.1383%" height="15" fill="rgb(221,10,30)" fg:x="30" fg:w="39"/><text x="4.2026%" y="879.50">[ld-li..</text></g><g><title>[ld-linux-x86-64.so.2] (30 samples, 3.95%)</title><rect x="5.1383%" y="853" width="3.9526%" height="15" fill="rgb(210,229,1)" fg:x="39" fg:w="30"/><text x="5.3883%" y="863.50">[ld-..</text></g><g><title>[ld-linux-x86-64.so.2] (30 samples, 3.95%)</title><rect x="5.1383%" y="837" width="3.9526%" height="15" fill="rgb(222,148,37)" fg:x="39" fg:w="30"/><text x="5.3883%" y="847.50">[ld-..</text></g><g><title>[ld-linux-x86-64.so.2] (27 samples, 3.56%)</title><rect x="5.5336%" y="821" width="3.5573%" height="15" fill="rgb(234,67,33)" fg:x="42" fg:w="27"/><text x="5.7836%" y="831.50">[ld-..</text></g><g><title>sincosf32x (1 samples, 0.13%)</title><rect x="8.9592%" y="805" width="0.1318%" height="15" fill="rgb(247,98,35)" fg:x="68" fg:w="1"/><text x="9.2092%" y="815.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="10.1449%" y="837" width="0.1318%" height="15" fill="rgb(247,138,52)" fg:x="77" fg:w="1"/><text x="10.3949%" y="847.50"></text></g><g><title>[libc.so.6] (4 samples, 0.53%)</title><rect x="10.1449%" y="853" width="0.5270%" height="15" fill="rgb(213,79,30)" fg:x="77" fg:w="4"/><text x="10.3949%" y="863.50"></text></g><g><title>snprintf (3 samples, 0.40%)</title><rect x="10.2767%" y="837" width="0.3953%" height="15" fill="rgb(246,177,23)" fg:x="78" fg:w="3"/><text x="10.5267%" y="847.50"></text></g><g><title>[libc.so.6] (3 samples, 0.40%)</title><rect x="10.2767%" y="821" width="0.3953%" height="15" fill="rgb(230,62,27)" fg:x="78" fg:w="3"/><text x="10.5267%" y="831.50"></text></g><g><title>[libc.so.6] (3 samples, 0.40%)</title><rect x="10.2767%" y="805" width="0.3953%" height="15" fill="rgb(216,154,8)" fg:x="78" fg:w="3"/><text x="10.5267%" y="815.50"></text></g><g><title>strchrnul@plt (1 samples, 0.13%)</title><rect x="10.5402%" y="789" width="0.1318%" height="15" fill="rgb(244,35,45)" fg:x="80" fg:w="1"/><text x="10.7902%" y="799.50"></text></g><g><title>__ctype_init (5 samples, 0.66%)</title><rect x="10.6719%" y="853" width="0.6588%" height="15" fill="rgb(251,115,12)" fg:x="81" fg:w="5"/><text x="10.9219%" y="863.50"></text></g><g><title>[libdbus-1.so.3.32.4] (2 samples, 0.26%)</title><rect x="11.3307%" y="597" width="0.2635%" height="15" fill="rgb(240,54,50)" fg:x="86" fg:w="2"/><text x="11.5807%" y="607.50"></text></g><g><title>[libdbus-1.so.3.32.4] (2 samples, 0.26%)</title><rect x="11.3307%" y="581" width="0.2635%" height="15" fill="rgb(233,84,52)" fg:x="86" fg:w="2"/><text x="11.5807%" y="591.50"></text></g><g><title>[libdbus-1.so.3.32.4] (1 samples, 0.13%)</title><rect x="11.4625%" y="565" width="0.1318%" height="15" fill="rgb(207,117,47)" fg:x="87" fg:w="1"/><text x="11.7125%" y="575.50"></text></g><g><title>[libdbus-1.so.3.32.4] (1 samples, 0.13%)</title><rect x="11.5942%" y="565" width="0.1318%" height="15" fill="rgb(249,43,39)" fg:x="88" fg:w="1"/><text x="11.8442%" y="575.50"></text></g><g><title>_dbus_timeout_unref (1 samples, 0.13%)</title><rect x="11.5942%" y="549" width="0.1318%" height="15" fill="rgb(209,38,44)" fg:x="88" fg:w="1"/><text x="11.8442%" y="559.50"></text></g><g><title>dbus_connection_send_with_reply (1 samples, 0.13%)</title><rect x="11.7260%" y="565" width="0.1318%" height="15" fill="rgb(236,212,23)" fg:x="89" fg:w="1"/><text x="11.9760%" y="575.50"></text></g><g><title>[libdbus-1.so.3.32.4] (1 samples, 0.13%)</title><rect x="11.7260%" y="549" width="0.1318%" height="15" fill="rgb(242,79,21)" fg:x="89" fg:w="1"/><text x="11.9760%" y="559.50"></text></g><g><title>[libdbus-1.so.3.32.4] (1 samples, 0.13%)</title><rect x="11.7260%" y="533" width="0.1318%" height="15" fill="rgb(211,96,35)" fg:x="89" fg:w="1"/><text x="11.9760%" y="543.50"></text></g><g><title>[libdbus-1.so.3.32.4] (1 samples, 0.13%)</title><rect x="11.7260%" y="517" width="0.1318%" height="15" fill="rgb(253,215,40)" fg:x="89" fg:w="1"/><text x="11.9760%" y="527.50"></text></g><g><title>[libdbus-1.so.3.32.4] (1 samples, 0.13%)</title><rect x="11.7260%" y="501" width="0.1318%" height="15" fill="rgb(211,81,21)" fg:x="89" fg:w="1"/><text x="11.9760%" y="511.50"></text></g><g><title>dbus_connection_send_with_reply_and_block (3 samples, 0.40%)</title><rect x="11.5942%" y="581" width="0.3953%" height="15" fill="rgb(208,190,38)" fg:x="88" fg:w="3"/><text x="11.8442%" y="591.50"></text></g><g><title>dbus_pending_call_block (1 samples, 0.13%)</title><rect x="11.8577%" y="565" width="0.1318%" height="15" fill="rgb(235,213,38)" fg:x="90" fg:w="1"/><text x="12.1077%" y="575.50"></text></g><g><title>[libdbus-1.so.3.32.4] (1 samples, 0.13%)</title><rect x="11.8577%" y="549" width="0.1318%" height="15" fill="rgb(237,122,38)" fg:x="90" fg:w="1"/><text x="12.1077%" y="559.50"></text></g><g><title>[libdbus-1.so.3.32.4] (1 samples, 0.13%)</title><rect x="11.8577%" y="533" width="0.1318%" height="15" fill="rgb(244,218,35)" fg:x="90" fg:w="1"/><text x="12.1077%" y="543.50"></text></g><g><title>[libdbus-1.so.3.32.4] (1 samples, 0.13%)</title><rect x="11.8577%" y="517" width="0.1318%" height="15" fill="rgb(240,68,47)" fg:x="90" fg:w="1"/><text x="12.1077%" y="527.50"></text></g><g><title>[libdbus-1.so.3.32.4] (1 samples, 0.13%)</title><rect x="11.8577%" y="501" width="0.1318%" height="15" fill="rgb(210,16,53)" fg:x="90" fg:w="1"/><text x="12.1077%" y="511.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.13%)</title><rect x="11.8577%" y="485" width="0.1318%" height="15" fill="rgb(235,124,12)" fg:x="90" fg:w="1"/><text x="12.1077%" y="495.50"></text></g><g><title>dbus_bus_register (4 samples, 0.53%)</title><rect x="11.5942%" y="597" width="0.5270%" height="15" fill="rgb(224,169,11)" fg:x="88" fg:w="4"/><text x="11.8442%" y="607.50"></text></g><g><title>dbus_message_new_method_call (1 samples, 0.13%)</title><rect x="11.9895%" y="581" width="0.1318%" height="15" fill="rgb(250,166,2)" fg:x="91" fg:w="1"/><text x="12.2395%" y="591.50"></text></g><g><title>[libdbus-1.so.3.32.4] (1 samples, 0.13%)</title><rect x="11.9895%" y="565" width="0.1318%" height="15" fill="rgb(242,216,29)" fg:x="91" fg:w="1"/><text x="12.2395%" y="575.50"></text></g><g><title>[libdbus-1.so.3.32.4] (1 samples, 0.13%)</title><rect x="11.9895%" y="549" width="0.1318%" height="15" fill="rgb(230,116,27)" fg:x="91" fg:w="1"/><text x="12.2395%" y="559.50"></text></g><g><title>_dbus_type_writer_recurse (1 samples, 0.13%)</title><rect x="11.9895%" y="533" width="0.1318%" height="15" fill="rgb(228,99,48)" fg:x="91" fg:w="1"/><text x="12.2395%" y="543.50"></text></g><g><title>[libdbus-1.so.3.32.4] (1 samples, 0.13%)</title><rect x="11.9895%" y="517" width="0.1318%" height="15" fill="rgb(253,11,6)" fg:x="91" fg:w="1"/><text x="12.2395%" y="527.50"></text></g><g><title>[libdbus-1.so.3.32.4] (1 samples, 0.13%)</title><rect x="11.9895%" y="501" width="0.1318%" height="15" fill="rgb(247,143,39)" fg:x="91" fg:w="1"/><text x="12.2395%" y="511.50"></text></g><g><title>dbus::blocking::Connection::new_session (7 samples, 0.92%)</title><rect x="11.3307%" y="645" width="0.9223%" height="15" fill="rgb(236,97,10)" fg:x="86" fg:w="7"/><text x="11.5807%" y="655.50"></text></g><g><title>dbus::channel::ffichannel::Channel::get_private (7 samples, 0.92%)</title><rect x="11.3307%" y="629" width="0.9223%" height="15" fill="rgb(233,208,19)" fg:x="86" fg:w="7"/><text x="11.5807%" y="639.50"></text></g><g><title>[libdbus-1.so.3.32.4] (7 samples, 0.92%)</title><rect x="11.3307%" y="613" width="0.9223%" height="15" fill="rgb(216,164,2)" fg:x="86" fg:w="7"/><text x="11.5807%" y="623.50"></text></g><g><title>getenv (1 samples, 0.13%)</title><rect x="12.1212%" y="597" width="0.1318%" height="15" fill="rgb(220,129,5)" fg:x="92" fg:w="1"/><text x="12.3712%" y="607.50"></text></g><g><title>&lt;(A,B) as dbus::arg::msgarg::AppendAll&gt;::append (1 samples, 0.13%)</title><rect x="12.2530%" y="581" width="0.1318%" height="15" fill="rgb(242,17,10)" fg:x="93" fg:w="1"/><text x="12.5030%" y="591.50"></text></g><g><title>dbus::arg::IterAppend::append (1 samples, 0.13%)</title><rect x="12.2530%" y="565" width="0.1318%" height="15" fill="rgb(242,107,0)" fg:x="93" fg:w="1"/><text x="12.5030%" y="575.50"></text></g><g><title>dbus::arg::msgarg::Append::append (1 samples, 0.13%)</title><rect x="12.2530%" y="549" width="0.1318%" height="15" fill="rgb(251,28,31)" fg:x="93" fg:w="1"/><text x="12.5030%" y="559.50"></text></g><g><title>&lt;&amp;T as dbus::arg::msgarg::Append&gt;::append_by_ref (1 samples, 0.13%)</title><rect x="12.2530%" y="533" width="0.1318%" height="15" fill="rgb(233,223,10)" fg:x="93" fg:w="1"/><text x="12.5030%" y="543.50"></text></g><g><title>dbus::arg::basic_impl::&lt;impl dbus::arg::msgarg::Append for u32&gt;::append_by_ref (1 samples, 0.13%)</title><rect x="12.2530%" y="517" width="0.1318%" height="15" fill="rgb(215,21,27)" fg:x="93" fg:w="1"/><text x="12.5030%" y="527.50"></text></g><g><title>dbus::arg::basic_impl::arg_append_basic (1 samples, 0.13%)</title><rect x="12.2530%" y="501" width="0.1318%" height="15" fill="rgb(232,23,21)" fg:x="93" fg:w="1"/><text x="12.5030%" y="511.50"></text></g><g><title>dbus_message_iter_append_basic (1 samples, 0.13%)</title><rect x="12.2530%" y="485" width="0.1318%" height="15" fill="rgb(244,5,23)" fg:x="93" fg:w="1"/><text x="12.5030%" y="495.50"></text></g><g><title>[libdbus-1.so.3.32.4] (1 samples, 0.13%)</title><rect x="12.2530%" y="469" width="0.1318%" height="15" fill="rgb(226,81,46)" fg:x="93" fg:w="1"/><text x="12.5030%" y="479.50"></text></g><g><title>_dbus_header_set_field_basic (1 samples, 0.13%)</title><rect x="12.2530%" y="453" width="0.1318%" height="15" fill="rgb(247,70,30)" fg:x="93" fg:w="1"/><text x="12.5030%" y="463.50"></text></g><g><title>_dbus_type_reader_set_basic (1 samples, 0.13%)</title><rect x="12.2530%" y="437" width="0.1318%" height="15" fill="rgb(212,68,19)" fg:x="93" fg:w="1"/><text x="12.5030%" y="447.50"></text></g><g><title>[libdbus-1.so.3.32.4] (1 samples, 0.13%)</title><rect x="12.2530%" y="421" width="0.1318%" height="15" fill="rgb(240,187,13)" fg:x="93" fg:w="1"/><text x="12.5030%" y="431.50"></text></g><g><title>[libdbus-1.so.3.32.4] (1 samples, 0.13%)</title><rect x="12.2530%" y="405" width="0.1318%" height="15" fill="rgb(223,113,26)" fg:x="93" fg:w="1"/><text x="12.5030%" y="415.50"></text></g><g><title>dbus::blocking::Connection::request_name (2 samples, 0.26%)</title><rect x="12.2530%" y="645" width="0.2635%" height="15" fill="rgb(206,192,2)" fg:x="93" fg:w="2"/><text x="12.5030%" y="655.50"></text></g><g><title>dbus::blocking::stdintf::org_freedesktop_dbus::request_name (2 samples, 0.26%)</title><rect x="12.2530%" y="629" width="0.2635%" height="15" fill="rgb(241,108,4)" fg:x="93" fg:w="2"/><text x="12.5030%" y="639.50"></text></g><g><title>&lt;dbus::blocking::Proxy&lt;C&gt; as dbus::blocking::generated_org_freedesktop_dbus::DBus&gt;::request_name (2 samples, 0.26%)</title><rect x="12.2530%" y="613" width="0.2635%" height="15" fill="rgb(247,173,49)" fg:x="93" fg:w="2"/><text x="12.5030%" y="623.50"></text></g><g><title>dbus::blocking::Proxy&lt;C&gt;::method_call (2 samples, 0.26%)</title><rect x="12.2530%" y="597" width="0.2635%" height="15" fill="rgb(224,114,35)" fg:x="93" fg:w="2"/><text x="12.5030%" y="607.50"></text></g><g><title>&lt;dbus::channel::ffichannel::Channel as dbus::blocking::BlockingSender&gt;::send_with_reply_and_block (1 samples, 0.13%)</title><rect x="12.3847%" y="581" width="0.1318%" height="15" fill="rgb(245,159,27)" fg:x="94" fg:w="1"/><text x="12.6347%" y="591.50"></text></g><g><title>dbus::channel::ffichannel::Channel::send_with_reply_and_block (1 samples, 0.13%)</title><rect x="12.3847%" y="565" width="0.1318%" height="15" fill="rgb(245,172,44)" fg:x="94" fg:w="1"/><text x="12.6347%" y="575.50"></text></g><g><title>dbus_connection_send_with_reply_and_block (1 samples, 0.13%)</title><rect x="12.3847%" y="549" width="0.1318%" height="15" fill="rgb(236,23,11)" fg:x="94" fg:w="1"/><text x="12.6347%" y="559.50"></text></g><g><title>dbus_pending_call_block (1 samples, 0.13%)</title><rect x="12.3847%" y="533" width="0.1318%" height="15" fill="rgb(205,117,38)" fg:x="94" fg:w="1"/><text x="12.6347%" y="543.50"></text></g><g><title>[libdbus-1.so.3.32.4] (1 samples, 0.13%)</title><rect x="12.3847%" y="517" width="0.1318%" height="15" fill="rgb(237,72,25)" fg:x="94" fg:w="1"/><text x="12.6347%" y="527.50"></text></g><g><title>[libdbus-1.so.3.32.4] (1 samples, 0.13%)</title><rect x="12.3847%" y="501" width="0.1318%" height="15" fill="rgb(244,70,9)" fg:x="94" fg:w="1"/><text x="12.6347%" y="511.50"></text></g><g><title>[libdbus-1.so.3.32.4] (1 samples, 0.13%)</title><rect x="12.3847%" y="485" width="0.1318%" height="15" fill="rgb(217,125,39)" fg:x="94" fg:w="1"/><text x="12.6347%" y="495.50"></text></g><g><title>[libdbus-1.so.3.32.4] (1 samples, 0.13%)</title><rect x="12.3847%" y="469" width="0.1318%" height="15" fill="rgb(235,36,10)" fg:x="94" fg:w="1"/><text x="12.6347%" y="479.50"></text></g><g><title>[libdbus-1.so.3.32.4] (1 samples, 0.13%)</title><rect x="12.3847%" y="453" width="0.1318%" height="15" fill="rgb(251,123,47)" fg:x="94" fg:w="1"/><text x="12.6347%" y="463.50"></text></g><g><title>_dbus_message_loader_queue_messages (1 samples, 0.13%)</title><rect x="12.3847%" y="437" width="0.1318%" height="15" fill="rgb(221,13,13)" fg:x="94" fg:w="1"/><text x="12.6347%" y="447.50"></text></g><g><title>[libdbus-1.so.3.32.4] (1 samples, 0.13%)</title><rect x="12.3847%" y="421" width="0.1318%" height="15" fill="rgb(238,131,9)" fg:x="94" fg:w="1"/><text x="12.6347%" y="431.50"></text></g><g><title>shmr2::ShmrFs::new::_{{closure}} (10 samples, 1.32%)</title><rect x="11.3307%" y="677" width="1.3175%" height="15" fill="rgb(211,50,8)" fg:x="86" fg:w="10"/><text x="11.5807%" y="687.50"></text></g><g><title>shmr2::dbus::dbus_server (10 samples, 1.32%)</title><rect x="11.3307%" y="661" width="1.3175%" height="15" fill="rgb(245,182,24)" fg:x="86" fg:w="10"/><text x="11.5807%" y="671.50"></text></g><g><title>log::__private_api::log (1 samples, 0.13%)</title><rect x="12.5165%" y="645" width="0.1318%" height="15" fill="rgb(242,14,37)" fg:x="95" fg:w="1"/><text x="12.7665%" y="655.50"></text></g><g><title>log::__private_api::log_impl (1 samples, 0.13%)</title><rect x="12.5165%" y="629" width="0.1318%" height="15" fill="rgb(246,228,12)" fg:x="95" fg:w="1"/><text x="12.7665%" y="639.50"></text></g><g><title>&lt;env_logger::logger::Logger as log::Log&gt;::log (1 samples, 0.13%)</title><rect x="12.5165%" y="613" width="0.1318%" height="15" fill="rgb(213,55,15)" fg:x="95" fg:w="1"/><text x="12.7665%" y="623.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.13%)</title><rect x="12.5165%" y="597" width="0.1318%" height="15" fill="rgb(209,9,3)" fg:x="95" fg:w="1"/><text x="12.7665%" y="607.50"></text></g><g><title>&lt;env_logger::logger::Logger as log::Log&gt;::log::_{{closure}} (1 samples, 0.13%)</title><rect x="12.5165%" y="581" width="0.1318%" height="15" fill="rgb(230,59,30)" fg:x="95" fg:w="1"/><text x="12.7665%" y="591.50"></text></g><g><title>&lt;env_logger::logger::Logger as log::Log&gt;::log::_{{closure}} (1 samples, 0.13%)</title><rect x="12.5165%" y="565" width="0.1318%" height="15" fill="rgb(209,121,21)" fg:x="95" fg:w="1"/><text x="12.7665%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.13%)</title><rect x="12.5165%" y="549" width="0.1318%" height="15" fill="rgb(220,109,13)" fg:x="95" fg:w="1"/><text x="12.7665%" y="559.50"></text></g><g><title>&lt;env_logger::logger::Logger as log::Log&gt;::log::_{{closure}}::_{{closure}} (1 samples, 0.13%)</title><rect x="12.5165%" y="533" width="0.1318%" height="15" fill="rgb(232,18,1)" fg:x="95" fg:w="1"/><text x="12.7665%" y="543.50"></text></g><g><title>env_logger::fmt::Formatter::print (1 samples, 0.13%)</title><rect x="12.5165%" y="517" width="0.1318%" height="15" fill="rgb(215,41,42)" fg:x="95" fg:w="1"/><text x="12.7665%" y="527.50"></text></g><g><title>env_logger::fmt::writer::Writer::print (1 samples, 0.13%)</title><rect x="12.5165%" y="501" width="0.1318%" height="15" fill="rgb(224,123,36)" fg:x="95" fg:w="1"/><text x="12.7665%" y="511.50"></text></g><g><title>env_logger::fmt::writer::buffer::BufferWriter::print (1 samples, 0.13%)</title><rect x="12.5165%" y="485" width="0.1318%" height="15" fill="rgb(240,125,3)" fg:x="95" fg:w="1"/><text x="12.7665%" y="495.50"></text></g><g><title>anstream::auto::AutoStream&lt;S&gt;::new (1 samples, 0.13%)</title><rect x="12.5165%" y="469" width="0.1318%" height="15" fill="rgb(205,98,50)" fg:x="95" fg:w="1"/><text x="12.7665%" y="479.50"></text></g><g><title>isatty (1 samples, 0.13%)</title><rect x="12.5165%" y="453" width="0.1318%" height="15" fill="rgb(205,185,37)" fg:x="95" fg:w="1"/><text x="12.7665%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort (1 samples, 0.13%)</title><rect x="12.6482%" y="629" width="0.1318%" height="15" fill="rgb(238,207,15)" fg:x="96" fg:w="1"/><text x="12.8982%" y="639.50"></text></g><g><title>alloc::slice::stable_sort (1 samples, 0.13%)</title><rect x="12.6482%" y="613" width="0.1318%" height="15" fill="rgb(213,199,42)" fg:x="96" fg:w="1"/><text x="12.8982%" y="623.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.13%)</title><rect x="12.6482%" y="597" width="0.1318%" height="15" fill="rgb(235,201,11)" fg:x="96" fg:w="1"/><text x="12.8982%" y="607.50"></text></g><g><title>core::slice::sort::find_streak (1 samples, 0.13%)</title><rect x="12.6482%" y="581" width="0.1318%" height="15" fill="rgb(207,46,11)" fg:x="96" fg:w="1"/><text x="12.8982%" y="591.50"></text></g><g><title>&lt;shmr2::databunny::FilePerKey as shmr2::databunny::StorageBackend&gt;::save (1 samples, 0.13%)</title><rect x="12.7800%" y="613" width="0.1318%" height="15" fill="rgb(241,35,35)" fg:x="97" fg:w="1"/><text x="13.0300%" y="623.50"></text></g><g><title>shmr2::databunny::FilePerKey::write_file (1 samples, 0.13%)</title><rect x="12.7800%" y="597" width="0.1318%" height="15" fill="rgb(243,32,47)" fg:x="97" fg:w="1"/><text x="13.0300%" y="607.50"></text></g><g><title>log::__private_api::log (1 samples, 0.13%)</title><rect x="12.7800%" y="581" width="0.1318%" height="15" fill="rgb(247,202,23)" fg:x="97" fg:w="1"/><text x="13.0300%" y="591.50"></text></g><g><title>log::__private_api::log_impl (1 samples, 0.13%)</title><rect x="12.7800%" y="565" width="0.1318%" height="15" fill="rgb(219,102,11)" fg:x="97" fg:w="1"/><text x="13.0300%" y="575.50"></text></g><g><title>&lt;env_logger::logger::Logger as log::Log&gt;::log (1 samples, 0.13%)</title><rect x="12.7800%" y="549" width="0.1318%" height="15" fill="rgb(243,110,44)" fg:x="97" fg:w="1"/><text x="13.0300%" y="559.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.13%)</title><rect x="12.7800%" y="533" width="0.1318%" height="15" fill="rgb(222,74,54)" fg:x="97" fg:w="1"/><text x="13.0300%" y="543.50"></text></g><g><title>&lt;env_logger::logger::Logger as log::Log&gt;::log::_{{closure}} (1 samples, 0.13%)</title><rect x="12.7800%" y="517" width="0.1318%" height="15" fill="rgb(216,99,12)" fg:x="97" fg:w="1"/><text x="13.0300%" y="527.50"></text></g><g><title>&lt;env_logger::logger::Logger as log::Log&gt;::log::_{{closure}} (1 samples, 0.13%)</title><rect x="12.7800%" y="501" width="0.1318%" height="15" fill="rgb(226,22,26)" fg:x="97" fg:w="1"/><text x="13.0300%" y="511.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.13%)</title><rect x="12.7800%" y="485" width="0.1318%" height="15" fill="rgb(217,163,10)" fg:x="97" fg:w="1"/><text x="13.0300%" y="495.50"></text></g><g><title>&lt;env_logger::logger::Logger as log::Log&gt;::log::_{{closure}}::_{{closure}} (1 samples, 0.13%)</title><rect x="12.7800%" y="469" width="0.1318%" height="15" fill="rgb(213,25,53)" fg:x="97" fg:w="1"/><text x="13.0300%" y="479.50"></text></g><g><title>env_logger::fmt::Formatter::print (1 samples, 0.13%)</title><rect x="12.7800%" y="453" width="0.1318%" height="15" fill="rgb(252,105,26)" fg:x="97" fg:w="1"/><text x="13.0300%" y="463.50"></text></g><g><title>env_logger::fmt::writer::Writer::print (1 samples, 0.13%)</title><rect x="12.7800%" y="437" width="0.1318%" height="15" fill="rgb(220,39,43)" fg:x="97" fg:w="1"/><text x="13.0300%" y="447.50"></text></g><g><title>env_logger::fmt::writer::buffer::BufferWriter::print (1 samples, 0.13%)</title><rect x="12.7800%" y="421" width="0.1318%" height="15" fill="rgb(229,68,48)" fg:x="97" fg:w="1"/><text x="13.0300%" y="431.50"></text></g><g><title>shmr2::types::_::&lt;impl serde::ser::Serialize for shmr2::types::Inode&gt;::serialize (1 samples, 0.13%)</title><rect x="12.9117%" y="549" width="0.1318%" height="15" fill="rgb(252,8,32)" fg:x="98" fg:w="1"/><text x="13.1617%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_yaml::ser::Serializer&lt;W&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.13%)</title><rect x="12.9117%" y="533" width="0.1318%" height="15" fill="rgb(223,20,43)" fg:x="98" fg:w="1"/><text x="13.1617%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_yaml::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.13%)</title><rect x="12.9117%" y="517" width="0.1318%" height="15" fill="rgb(229,81,49)" fg:x="98" fg:w="1"/><text x="13.1617%" y="527.50"></text></g><g><title>serde_yaml::ser::Serializer&lt;W&gt;::emit_scalar (1 samples, 0.13%)</title><rect x="12.9117%" y="501" width="0.1318%" height="15" fill="rgb(236,28,36)" fg:x="98" fg:w="1"/><text x="13.1617%" y="511.50"></text></g><g><title>serde_yaml::libyaml::emitter::Emitter::emit (1 samples, 0.13%)</title><rect x="12.9117%" y="485" width="0.1318%" height="15" fill="rgb(249,185,26)" fg:x="98" fg:w="1"/><text x="13.1617%" y="495.50"></text></g><g><title>unsafe_libyaml::emitter::yaml_emitter_emit (1 samples, 0.13%)</title><rect x="12.9117%" y="469" width="0.1318%" height="15" fill="rgb(249,174,33)" fg:x="98" fg:w="1"/><text x="13.1617%" y="479.50"></text></g><g><title>unsafe_libyaml::emitter::yaml_emitter_analyze_event (1 samples, 0.13%)</title><rect x="12.9117%" y="453" width="0.1318%" height="15" fill="rgb(233,201,37)" fg:x="98" fg:w="1"/><text x="13.1617%" y="463.50"></text></g><g><title>unsafe_libyaml::emitter::yaml_emitter_analyze_scalar (1 samples, 0.13%)</title><rect x="12.9117%" y="437" width="0.1318%" height="15" fill="rgb(221,78,26)" fg:x="98" fg:w="1"/><text x="13.1617%" y="447.50"></text></g><g><title>serde_yaml::de::visit_untagged_scalar (1 samples, 0.13%)</title><rect x="13.1752%" y="293" width="0.1318%" height="15" fill="rgb(250,127,30)" fg:x="100" fg:w="1"/><text x="13.4252%" y="303.50"></text></g><g><title>serde_yaml::de::visit_int (1 samples, 0.13%)</title><rect x="13.1752%" y="277" width="0.1318%" height="15" fill="rgb(230,49,44)" fg:x="100" fg:w="1"/><text x="13.4252%" y="287.50"></text></g><g><title>serde_yaml::de::parse_unsigned_int (1 samples, 0.13%)</title><rect x="13.1752%" y="261" width="0.1318%" height="15" fill="rgb(229,67,23)" fg:x="100" fg:w="1"/><text x="13.4252%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_str_radix (1 samples, 0.13%)</title><rect x="13.1752%" y="245" width="0.1318%" height="15" fill="rgb(249,83,47)" fg:x="100" fg:w="1"/><text x="13.4252%" y="255.50"></text></g><g><title>unsafe_libyaml::api::yaml_event_delete (1 samples, 0.13%)</title><rect x="13.3070%" y="245" width="0.1318%" height="15" fill="rgb(215,43,3)" fg:x="101" fg:w="1"/><text x="13.5570%" y="255.50"></text></g><g><title>unsafe_libyaml::api::yaml_free (1 samples, 0.13%)</title><rect x="13.3070%" y="229" width="0.1318%" height="15" fill="rgb(238,154,13)" fg:x="101" fg:w="1"/><text x="13.5570%" y="239.50"></text></g><g><title>unsafe_libyaml::externs::free (1 samples, 0.13%)</title><rect x="13.3070%" y="213" width="0.1318%" height="15" fill="rgb(219,56,2)" fg:x="101" fg:w="1"/><text x="13.5570%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.13%)</title><rect x="13.3070%" y="197" width="0.1318%" height="15" fill="rgb(233,0,4)" fg:x="101" fg:w="1"/><text x="13.5570%" y="207.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.13%)</title><rect x="13.3070%" y="181" width="0.1318%" height="15" fill="rgb(235,30,7)" fg:x="101" fg:w="1"/><text x="13.5570%" y="191.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.13%)</title><rect x="13.3070%" y="165" width="0.1318%" height="15" fill="rgb(250,79,13)" fg:x="101" fg:w="1"/><text x="13.5570%" y="175.50"></text></g><g><title>cfree (1 samples, 0.13%)</title><rect x="13.3070%" y="149" width="0.1318%" height="15" fill="rgb(211,146,34)" fg:x="101" fg:w="1"/><text x="13.5570%" y="159.50"></text></g><g><title>unsafe_libyaml::emitter::yaml_emitter_emit_mapping_start (1 samples, 0.13%)</title><rect x="13.4387%" y="213" width="0.1318%" height="15" fill="rgb(228,22,38)" fg:x="102" fg:w="1"/><text x="13.6887%" y="223.50"></text></g><g><title>unsafe_libyaml::emitter::yaml_emitter_process_anchor (1 samples, 0.13%)</title><rect x="13.4387%" y="197" width="0.1318%" height="15" fill="rgb(235,168,5)" fg:x="102" fg:w="1"/><text x="13.6887%" y="207.50"></text></g><g><title>unsafe_libyaml::emitter::yaml_emitter_process_scalar (1 samples, 0.13%)</title><rect x="13.5705%" y="197" width="0.1318%" height="15" fill="rgb(221,155,16)" fg:x="103" fg:w="1"/><text x="13.8205%" y="207.50"></text></g><g><title>unsafe_libyaml::emitter::yaml_emitter_write_plain_scalar (1 samples, 0.13%)</title><rect x="13.5705%" y="181" width="0.1318%" height="15" fill="rgb(215,215,53)" fg:x="103" fg:w="1"/><text x="13.8205%" y="191.50"></text></g><g><title>unsafe_libyaml::emitter::WRITE (1 samples, 0.13%)</title><rect x="13.5705%" y="165" width="0.1318%" height="15" fill="rgb(223,4,10)" fg:x="103" fg:w="1"/><text x="13.8205%" y="175.50"></text></g><g><title>&lt;&amp;mut serde_yaml::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_str (5 samples, 0.66%)</title><rect x="13.1752%" y="309" width="0.6588%" height="15" fill="rgb(234,103,6)" fg:x="100" fg:w="5"/><text x="13.4252%" y="319.50"></text></g><g><title>serde_yaml::ser::Serializer&lt;W&gt;::emit_scalar (4 samples, 0.53%)</title><rect x="13.3070%" y="293" width="0.5270%" height="15" fill="rgb(227,97,0)" fg:x="101" fg:w="4"/><text x="13.5570%" y="303.50"></text></g><g><title>serde_yaml::libyaml::emitter::Emitter::emit (4 samples, 0.53%)</title><rect x="13.3070%" y="277" width="0.5270%" height="15" fill="rgb(234,150,53)" fg:x="101" fg:w="4"/><text x="13.5570%" y="287.50"></text></g><g><title>unsafe_libyaml::emitter::yaml_emitter_emit (4 samples, 0.53%)</title><rect x="13.3070%" y="261" width="0.5270%" height="15" fill="rgb(228,201,54)" fg:x="101" fg:w="4"/><text x="13.5570%" y="271.50"></text></g><g><title>unsafe_libyaml::emitter::yaml_emitter_state_machine (3 samples, 0.40%)</title><rect x="13.4387%" y="245" width="0.3953%" height="15" fill="rgb(222,22,37)" fg:x="102" fg:w="3"/><text x="13.6887%" y="255.50"></text></g><g><title>unsafe_libyaml::emitter::yaml_emitter_emit_node (3 samples, 0.40%)</title><rect x="13.4387%" y="229" width="0.3953%" height="15" fill="rgb(237,53,32)" fg:x="102" fg:w="3"/><text x="13.6887%" y="239.50"></text></g><g><title>unsafe_libyaml::emitter::yaml_emitter_emit_scalar (2 samples, 0.26%)</title><rect x="13.5705%" y="213" width="0.2635%" height="15" fill="rgb(233,25,53)" fg:x="103" fg:w="2"/><text x="13.8205%" y="223.50"></text></g><g><title>unsafe_libyaml::emitter::yaml_emitter_select_scalar_style (1 samples, 0.13%)</title><rect x="13.7022%" y="197" width="0.1318%" height="15" fill="rgb(210,40,34)" fg:x="104" fg:w="1"/><text x="13.9522%" y="207.50"></text></g><g><title>serde_yaml::de::visit_untagged_scalar (1 samples, 0.13%)</title><rect x="13.9657%" y="133" width="0.1318%" height="15" fill="rgb(241,220,44)" fg:x="106" fg:w="1"/><text x="14.2157%" y="143.50"></text></g><g><title>serde_yaml::de::visit_int (1 samples, 0.13%)</title><rect x="13.9657%" y="117" width="0.1318%" height="15" fill="rgb(235,28,35)" fg:x="106" fg:w="1"/><text x="14.2157%" y="127.50"></text></g><g><title>serde_yaml::de::parse_unsigned_int (1 samples, 0.13%)</title><rect x="13.9657%" y="101" width="0.1318%" height="15" fill="rgb(210,56,17)" fg:x="106" fg:w="1"/><text x="14.2157%" y="111.50"></text></g><g><title>unsafe_libyaml::emitter::yaml_emitter_analyze_event (1 samples, 0.13%)</title><rect x="14.0975%" y="85" width="0.1318%" height="15" fill="rgb(224,130,29)" fg:x="107" fg:w="1"/><text x="14.3475%" y="95.50"></text></g><g><title>unsafe_libyaml::emitter::yaml_emitter_analyze_scalar (1 samples, 0.13%)</title><rect x="14.0975%" y="69" width="0.1318%" height="15" fill="rgb(235,212,8)" fg:x="107" fg:w="1"/><text x="14.3475%" y="79.50"></text></g><g><title>&lt;&amp;mut serde_yaml::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_str (3 samples, 0.40%)</title><rect x="13.9657%" y="149" width="0.3953%" height="15" fill="rgb(223,33,50)" fg:x="106" fg:w="3"/><text x="14.2157%" y="159.50"></text></g><g><title>serde_yaml::ser::Serializer&lt;W&gt;::emit_scalar (2 samples, 0.26%)</title><rect x="14.0975%" y="133" width="0.2635%" height="15" fill="rgb(219,149,13)" fg:x="107" fg:w="2"/><text x="14.3475%" y="143.50"></text></g><g><title>serde_yaml::libyaml::emitter::Emitter::emit (2 samples, 0.26%)</title><rect x="14.0975%" y="117" width="0.2635%" height="15" fill="rgb(250,156,29)" fg:x="107" fg:w="2"/><text x="14.3475%" y="127.50"></text></g><g><title>unsafe_libyaml::emitter::yaml_emitter_emit (2 samples, 0.26%)</title><rect x="14.0975%" y="101" width="0.2635%" height="15" fill="rgb(216,193,19)" fg:x="107" fg:w="2"/><text x="14.3475%" y="111.50"></text></g><g><title>unsafe_libyaml::emitter::yaml_emitter_state_machine (1 samples, 0.13%)</title><rect x="14.2292%" y="85" width="0.1318%" height="15" fill="rgb(216,135,14)" fg:x="108" fg:w="1"/><text x="14.4792%" y="95.50"></text></g><g><title>unsafe_libyaml::emitter::yaml_emitter_emit_block_mapping_key (1 samples, 0.13%)</title><rect x="14.2292%" y="69" width="0.1318%" height="15" fill="rgb(241,47,5)" fg:x="108" fg:w="1"/><text x="14.4792%" y="79.50"></text></g><g><title>unsafe_libyaml::emitter::yaml_emitter_write_indent (1 samples, 0.13%)</title><rect x="14.2292%" y="53" width="0.1318%" height="15" fill="rgb(233,42,35)" fg:x="108" fg:w="1"/><text x="14.4792%" y="63.50"></text></g><g><title>unsafe_libyaml::emitter::PUT (1 samples, 0.13%)</title><rect x="14.2292%" y="37" width="0.1318%" height="15" fill="rgb(231,13,6)" fg:x="108" fg:w="1"/><text x="14.4792%" y="47.50"></text></g><g><title>serde_yaml::de::visit_untagged_scalar (1 samples, 0.13%)</title><rect x="14.3610%" y="117" width="0.1318%" height="15" fill="rgb(207,181,40)" fg:x="109" fg:w="1"/><text x="14.6110%" y="127.50"></text></g><g><title>&lt;&lt;&amp;mut serde_yaml::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_str::InferScalarStyle as serde::de::Visitor&gt;::visit_str (1 samples, 0.13%)</title><rect x="14.3610%" y="101" width="0.1318%" height="15" fill="rgb(254,173,49)" fg:x="109" fg:w="1"/><text x="14.6110%" y="111.50"></text></g><g><title>serde_yaml::de::digits_but_not_number (1 samples, 0.13%)</title><rect x="14.3610%" y="85" width="0.1318%" height="15" fill="rgb(221,1,38)" fg:x="109" fg:w="1"/><text x="14.6110%" y="95.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (1 samples, 0.13%)</title><rect x="14.3610%" y="69" width="0.1318%" height="15" fill="rgb(206,124,46)" fg:x="109" fg:w="1"/><text x="14.6110%" y="79.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (6 samples, 0.79%)</title><rect x="13.8340%" y="309" width="0.7905%" height="15" fill="rgb(249,21,11)" fg:x="105" fg:w="6"/><text x="14.0840%" y="319.50"></text></g><g><title>serde::ser::Serializer::collect_seq (6 samples, 0.79%)</title><rect x="13.8340%" y="293" width="0.7905%" height="15" fill="rgb(222,201,40)" fg:x="105" fg:w="6"/><text x="14.0840%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (6 samples, 0.79%)</title><rect x="13.8340%" y="277" width="0.7905%" height="15" fill="rgb(235,61,29)" fg:x="105" fg:w="6"/><text x="14.0840%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (6 samples, 0.79%)</title><rect x="13.8340%" y="261" width="0.7905%" height="15" fill="rgb(219,207,3)" fg:x="105" fg:w="6"/><text x="14.0840%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::_{{closure}} (6 samples, 0.79%)</title><rect x="13.8340%" y="245" width="0.7905%" height="15" fill="rgb(222,56,46)" fg:x="105" fg:w="6"/><text x="14.0840%" y="255.50"></text></g><g><title>serde::ser::Serializer::collect_seq::_{{closure}} (6 samples, 0.79%)</title><rect x="13.8340%" y="229" width="0.7905%" height="15" fill="rgb(239,76,54)" fg:x="105" fg:w="6"/><text x="14.0840%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_yaml::ser::Serializer&lt;W&gt; as serde::ser::SerializeSeq&gt;::serialize_element (6 samples, 0.79%)</title><rect x="13.8340%" y="213" width="0.7905%" height="15" fill="rgb(231,124,27)" fg:x="105" fg:w="6"/><text x="14.0840%" y="223.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.79%)</title><rect x="13.8340%" y="197" width="0.7905%" height="15" fill="rgb(249,195,6)" fg:x="105" fg:w="6"/><text x="14.0840%" y="207.50"></text></g><g><title>shmr2::vfs::path::_::&lt;impl serde::ser::Serialize for shmr2::vfs::path::VirtualPath&gt;::serialize (6 samples, 0.79%)</title><rect x="13.8340%" y="181" width="0.7905%" height="15" fill="rgb(237,174,47)" fg:x="105" fg:w="6"/><text x="14.0840%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_yaml::ser::Serializer&lt;W&gt; as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.79%)</title><rect x="13.8340%" y="165" width="0.7905%" height="15" fill="rgb(206,201,31)" fg:x="105" fg:w="6"/><text x="14.0840%" y="175.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (2 samples, 0.26%)</title><rect x="14.3610%" y="149" width="0.2635%" height="15" fill="rgb(231,57,52)" fg:x="109" fg:w="2"/><text x="14.6110%" y="159.50"></text></g><g><title>&lt;&amp;mut serde_yaml::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_str (2 samples, 0.26%)</title><rect x="14.3610%" y="133" width="0.2635%" height="15" fill="rgb(248,177,22)" fg:x="109" fg:w="2"/><text x="14.6110%" y="143.50"></text></g><g><title>serde_yaml::ser::Serializer&lt;W&gt;::emit_scalar (1 samples, 0.13%)</title><rect x="14.4928%" y="117" width="0.1318%" height="15" fill="rgb(215,211,37)" fg:x="110" fg:w="1"/><text x="14.7428%" y="127.50"></text></g><g><title>serde_yaml::libyaml::emitter::Emitter::emit (1 samples, 0.13%)</title><rect x="14.4928%" y="101" width="0.1318%" height="15" fill="rgb(241,128,51)" fg:x="110" fg:w="1"/><text x="14.7428%" y="111.50"></text></g><g><title>unsafe_libyaml::api::yaml_scalar_event_initialize (1 samples, 0.13%)</title><rect x="14.4928%" y="85" width="0.1318%" height="15" fill="rgb(227,165,31)" fg:x="110" fg:w="1"/><text x="14.7428%" y="95.50"></text></g><g><title>unsafe_libyaml::api::yaml_check_utf8 (1 samples, 0.13%)</title><rect x="14.4928%" y="69" width="0.1318%" height="15" fill="rgb(228,167,24)" fg:x="110" fg:w="1"/><text x="14.7428%" y="79.50"></text></g><g><title>&lt;&amp;mut serde_yaml::ser::Serializer&lt;W&gt; as serde::ser::SerializeStruct&gt;::serialize_field (14 samples, 1.84%)</title><rect x="12.9117%" y="565" width="1.8445%" height="15" fill="rgb(228,143,12)" fg:x="98" fg:w="14"/><text x="13.1617%" y="575.50">&lt;..</text></g><g><title>shmr2::types::_::&lt;impl serde::ser::Serialize for shmr2::types::InodeDescriptor&gt;::serialize (13 samples, 1.71%)</title><rect x="13.0435%" y="549" width="1.7128%" height="15" fill="rgb(249,149,8)" fg:x="99" fg:w="13"/><text x="13.2935%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_yaml::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_newtype_variant (13 samples, 1.71%)</title><rect x="13.0435%" y="533" width="1.7128%" height="15" fill="rgb(243,35,44)" fg:x="99" fg:w="13"/><text x="13.2935%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::boxed::Box&lt;T&gt;&gt;::serialize (13 samples, 1.71%)</title><rect x="13.0435%" y="517" width="1.7128%" height="15" fill="rgb(246,89,9)" fg:x="99" fg:w="13"/><text x="13.2935%" y="527.50"></text></g><g><title>shmr2::vfs::_::&lt;impl serde::ser::Serialize for shmr2::vfs::VirtualFile&gt;::serialize (13 samples, 1.71%)</title><rect x="13.0435%" y="501" width="1.7128%" height="15" fill="rgb(233,213,13)" fg:x="99" fg:w="13"/><text x="13.2935%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_yaml::ser::Serializer&lt;W&gt; as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 1.58%)</title><rect x="13.1752%" y="485" width="1.5810%" height="15" fill="rgb(233,141,41)" fg:x="100" fg:w="12"/><text x="13.4252%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (12 samples, 1.58%)</title><rect x="13.1752%" y="469" width="1.5810%" height="15" fill="rgb(239,167,4)" fg:x="100" fg:w="12"/><text x="13.4252%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (12 samples, 1.58%)</title><rect x="13.1752%" y="453" width="1.5810%" height="15" fill="rgb(209,217,16)" fg:x="100" fg:w="12"/><text x="13.4252%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (12 samples, 1.58%)</title><rect x="13.1752%" y="437" width="1.5810%" height="15" fill="rgb(219,88,35)" fg:x="100" fg:w="12"/><text x="13.4252%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (12 samples, 1.58%)</title><rect x="13.1752%" y="421" width="1.5810%" height="15" fill="rgb(220,193,23)" fg:x="100" fg:w="12"/><text x="13.4252%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::_{{closure}} (12 samples, 1.58%)</title><rect x="13.1752%" y="405" width="1.5810%" height="15" fill="rgb(230,90,52)" fg:x="100" fg:w="12"/><text x="13.4252%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq::_{{closure}} (12 samples, 1.58%)</title><rect x="13.1752%" y="389" width="1.5810%" height="15" fill="rgb(252,106,19)" fg:x="100" fg:w="12"/><text x="13.4252%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_yaml::ser::Serializer&lt;W&gt; as serde::ser::SerializeSeq&gt;::serialize_element (12 samples, 1.58%)</title><rect x="13.1752%" y="373" width="1.5810%" height="15" fill="rgb(206,74,20)" fg:x="100" fg:w="12"/><text x="13.4252%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (12 samples, 1.58%)</title><rect x="13.1752%" y="357" width="1.5810%" height="15" fill="rgb(230,138,44)" fg:x="100" fg:w="12"/><text x="13.4252%" y="367.50"></text></g><g><title>shmr2::vfs::block::_::&lt;impl serde::ser::Serialize for shmr2::vfs::block::VirtualBlock&gt;::serialize (12 samples, 1.58%)</title><rect x="13.1752%" y="341" width="1.5810%" height="15" fill="rgb(235,182,43)" fg:x="100" fg:w="12"/><text x="13.4252%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_yaml::ser::Serializer&lt;W&gt; as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 1.58%)</title><rect x="13.1752%" y="325" width="1.5810%" height="15" fill="rgb(242,16,51)" fg:x="100" fg:w="12"/><text x="13.4252%" y="335.50"></text></g><g><title>shmr2::vfs::block::_::&lt;impl serde::ser::Serialize for shmr2::vfs::block::BlockTopology&gt;::serialize (1 samples, 0.13%)</title><rect x="14.6245%" y="309" width="0.1318%" height="15" fill="rgb(248,9,4)" fg:x="111" fg:w="1"/><text x="14.8745%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_yaml::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_unit_variant (1 samples, 0.13%)</title><rect x="14.6245%" y="293" width="0.1318%" height="15" fill="rgb(210,31,22)" fg:x="111" fg:w="1"/><text x="14.8745%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_yaml::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.13%)</title><rect x="14.6245%" y="277" width="0.1318%" height="15" fill="rgb(239,54,39)" fg:x="111" fg:w="1"/><text x="14.8745%" y="287.50"></text></g><g><title>serde_yaml::ser::Serializer&lt;W&gt;::emit_scalar (1 samples, 0.13%)</title><rect x="14.6245%" y="261" width="0.1318%" height="15" fill="rgb(230,99,41)" fg:x="111" fg:w="1"/><text x="14.8745%" y="271.50"></text></g><g><title>serde_yaml::libyaml::emitter::Emitter::emit (1 samples, 0.13%)</title><rect x="14.6245%" y="245" width="0.1318%" height="15" fill="rgb(253,106,12)" fg:x="111" fg:w="1"/><text x="14.8745%" y="255.50"></text></g><g><title>unsafe_libyaml::emitter::yaml_emitter_emit (1 samples, 0.13%)</title><rect x="14.6245%" y="229" width="0.1318%" height="15" fill="rgb(213,46,41)" fg:x="111" fg:w="1"/><text x="14.8745%" y="239.50"></text></g><g><title>unsafe_libyaml::emitter::yaml_emitter_analyze_event (1 samples, 0.13%)</title><rect x="14.6245%" y="213" width="0.1318%" height="15" fill="rgb(215,133,35)" fg:x="111" fg:w="1"/><text x="14.8745%" y="223.50"></text></g><g><title>unsafe_libyaml::emitter::yaml_emitter_analyze_scalar (1 samples, 0.13%)</title><rect x="14.6245%" y="197" width="0.1318%" height="15" fill="rgb(213,28,5)" fg:x="111" fg:w="1"/><text x="14.8745%" y="207.50"></text></g><g><title>&lt;shmr2::databunny::BunnyWorker&lt;K,V&gt; as shmr2::tasks::WorkerTask&gt;::execute (17 samples, 2.24%)</title><rect x="12.6482%" y="661" width="2.2398%" height="15" fill="rgb(215,77,49)" fg:x="96" fg:w="17"/><text x="12.8982%" y="671.50">&lt;..</text></g><g><title>shmr2::databunny::DataBunny&lt;K,V&gt;::flush_all (17 samples, 2.24%)</title><rect x="12.6482%" y="645" width="2.2398%" height="15" fill="rgb(248,100,22)" fg:x="96" fg:w="17"/><text x="12.8982%" y="655.50">s..</text></g><g><title>shmr2::databunny::DataBunny&lt;K,V&gt;::flush (16 samples, 2.11%)</title><rect x="12.7800%" y="629" width="2.1080%" height="15" fill="rgb(208,67,9)" fg:x="97" fg:w="16"/><text x="13.0300%" y="639.50">s..</text></g><g><title>serde_yaml::ser::to_string (15 samples, 1.98%)</title><rect x="12.9117%" y="613" width="1.9763%" height="15" fill="rgb(219,133,21)" fg:x="98" fg:w="15"/><text x="13.1617%" y="623.50">s..</text></g><g><title>serde_yaml::ser::to_writer (15 samples, 1.98%)</title><rect x="12.9117%" y="597" width="1.9763%" height="15" fill="rgb(246,46,29)" fg:x="98" fg:w="15"/><text x="13.1617%" y="607.50">s..</text></g><g><title>shmr2::types::_::&lt;impl serde::ser::Serialize for shmr2::types::SuperblockEntry&gt;::serialize (15 samples, 1.98%)</title><rect x="12.9117%" y="581" width="1.9763%" height="15" fill="rgb(246,185,52)" fg:x="98" fg:w="15"/><text x="13.1617%" y="591.50">s..</text></g><g><title>&lt;&amp;mut serde_yaml::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_struct (1 samples, 0.13%)</title><rect x="14.7563%" y="565" width="0.1318%" height="15" fill="rgb(252,136,11)" fg:x="112" fg:w="1"/><text x="15.0063%" y="575.50"></text></g><g><title>serde_yaml::ser::Serializer&lt;W&gt;::emit_mapping_start (1 samples, 0.13%)</title><rect x="14.7563%" y="549" width="0.1318%" height="15" fill="rgb(219,138,53)" fg:x="112" fg:w="1"/><text x="15.0063%" y="559.50"></text></g><g><title>serde_yaml::libyaml::emitter::Emitter::emit (1 samples, 0.13%)</title><rect x="14.7563%" y="533" width="0.1318%" height="15" fill="rgb(211,51,23)" fg:x="112" fg:w="1"/><text x="15.0063%" y="543.50"></text></g><g><title>unsafe_libyaml::emitter::yaml_emitter_emit (1 samples, 0.13%)</title><rect x="14.7563%" y="517" width="0.1318%" height="15" fill="rgb(247,221,28)" fg:x="112" fg:w="1"/><text x="15.0063%" y="527.50"></text></g><g><title>unsafe_libyaml::emitter::yaml_emitter_state_machine (1 samples, 0.13%)</title><rect x="14.7563%" y="501" width="0.1318%" height="15" fill="rgb(251,222,45)" fg:x="112" fg:w="1"/><text x="15.0063%" y="511.50"></text></g><g><title>unsafe_libyaml::emitter::yaml_emitter_emit_document_start (1 samples, 0.13%)</title><rect x="14.7563%" y="485" width="0.1318%" height="15" fill="rgb(217,162,53)" fg:x="112" fg:w="1"/><text x="15.0063%" y="495.50"></text></g><g><title>unsafe_libyaml::emitter::yaml_emitter_append_tag_directive (1 samples, 0.13%)</title><rect x="14.7563%" y="469" width="0.1318%" height="15" fill="rgb(229,93,14)" fg:x="112" fg:w="1"/><text x="15.0063%" y="479.50"></text></g><g><title>unsafe_libyaml::api::yaml_strdup (1 samples, 0.13%)</title><rect x="14.7563%" y="453" width="0.1318%" height="15" fill="rgb(209,67,49)" fg:x="112" fg:w="1"/><text x="15.0063%" y="463.50"></text></g><g><title>unsafe_libyaml::externs::strdup (1 samples, 0.13%)</title><rect x="14.7563%" y="437" width="0.1318%" height="15" fill="rgb(213,87,29)" fg:x="112" fg:w="1"/><text x="15.0063%" y="447.50"></text></g><g><title>unsafe_libyaml::externs::strlen (1 samples, 0.13%)</title><rect x="14.7563%" y="421" width="0.1318%" height="15" fill="rgb(205,151,52)" fg:x="112" fg:w="1"/><text x="15.0063%" y="431.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (31 samples, 4.08%)</title><rect x="11.3307%" y="837" width="4.0843%" height="15" fill="rgb(253,215,39)" fg:x="86" fg:w="31"/><text x="11.5807%" y="847.50">&lt;all..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (31 samples, 4.08%)</title><rect x="11.3307%" y="821" width="4.0843%" height="15" fill="rgb(221,220,41)" fg:x="86" fg:w="31"/><text x="11.5807%" y="831.50">&lt;all..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (31 samples, 4.08%)</title><rect x="11.3307%" y="805" width="4.0843%" height="15" fill="rgb(218,133,21)" fg:x="86" fg:w="31"/><text x="11.5807%" y="815.50">core..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (31 samples, 4.08%)</title><rect x="11.3307%" y="789" width="4.0843%" height="15" fill="rgb(221,193,43)" fg:x="86" fg:w="31"/><text x="11.5807%" y="799.50">std:..</text></g><g><title>std::panic::catch_unwind (31 samples, 4.08%)</title><rect x="11.3307%" y="773" width="4.0843%" height="15" fill="rgb(240,128,52)" fg:x="86" fg:w="31"/><text x="11.5807%" y="783.50">std:..</text></g><g><title>std::panicking::try (31 samples, 4.08%)</title><rect x="11.3307%" y="757" width="4.0843%" height="15" fill="rgb(253,114,12)" fg:x="86" fg:w="31"/><text x="11.5807%" y="767.50">std:..</text></g><g><title>std::panicking::try::do_call (31 samples, 4.08%)</title><rect x="11.3307%" y="741" width="4.0843%" height="15" fill="rgb(215,223,47)" fg:x="86" fg:w="31"/><text x="11.5807%" y="751.50">std:..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (31 samples, 4.08%)</title><rect x="11.3307%" y="725" width="4.0843%" height="15" fill="rgb(248,225,23)" fg:x="86" fg:w="31"/><text x="11.5807%" y="735.50">&lt;cor..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (31 samples, 4.08%)</title><rect x="11.3307%" y="709" width="4.0843%" height="15" fill="rgb(250,108,0)" fg:x="86" fg:w="31"/><text x="11.5807%" y="719.50">std:..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (31 samples, 4.08%)</title><rect x="11.3307%" y="693" width="4.0843%" height="15" fill="rgb(228,208,7)" fg:x="86" fg:w="31"/><text x="11.5807%" y="703.50">std:..</text></g><g><title>shmr2::tasks::WorkerThread&lt;T&gt;::spawn::_{{closure}} (21 samples, 2.77%)</title><rect x="12.6482%" y="677" width="2.7668%" height="15" fill="rgb(244,45,10)" fg:x="96" fg:w="21"/><text x="12.8982%" y="687.50">sh..</text></g><g><title>std::thread::sleep (4 samples, 0.53%)</title><rect x="14.8880%" y="661" width="0.5270%" height="15" fill="rgb(207,125,25)" fg:x="113" fg:w="4"/><text x="15.1380%" y="671.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::sleep (4 samples, 0.53%)</title><rect x="14.8880%" y="645" width="0.5270%" height="15" fill="rgb(210,195,18)" fg:x="113" fg:w="4"/><text x="15.1380%" y="655.50"></text></g><g><title>__nanosleep (1 samples, 0.13%)</title><rect x="15.2833%" y="629" width="0.1318%" height="15" fill="rgb(249,80,12)" fg:x="116" fg:w="1"/><text x="15.5333%" y="639.50"></text></g><g><title>clock_nanosleep (1 samples, 0.13%)</title><rect x="15.2833%" y="613" width="0.1318%" height="15" fill="rgb(221,65,9)" fg:x="116" fg:w="1"/><text x="15.5333%" y="623.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="15.2833%" y="597" width="0.1318%" height="15" fill="rgb(235,49,36)" fg:x="116" fg:w="1"/><text x="15.5333%" y="607.50"></text></g><g><title>[libc.so.6] (50 samples, 6.59%)</title><rect x="9.0909%" y="885" width="6.5876%" height="15" fill="rgb(225,32,20)" fg:x="69" fg:w="50"/><text x="9.3409%" y="895.50">[libc.so...</text></g><g><title>[libc.so.6] (48 samples, 6.32%)</title><rect x="9.3544%" y="869" width="6.3241%" height="15" fill="rgb(215,141,46)" fg:x="71" fg:w="48"/><text x="9.6044%" y="879.50">[libc.so..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (33 samples, 4.35%)</title><rect x="11.3307%" y="853" width="4.3478%" height="15" fill="rgb(250,160,47)" fg:x="86" fg:w="33"/><text x="11.5807%" y="863.50">std::..</text></g><g><title>std::sys::pal::unix::stack_overflow::Handler::new (2 samples, 0.26%)</title><rect x="15.4150%" y="837" width="0.2635%" height="15" fill="rgb(216,222,40)" fg:x="117" fg:w="2"/><text x="15.6650%" y="847.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::make_handler (2 samples, 0.26%)</title><rect x="15.4150%" y="821" width="0.2635%" height="15" fill="rgb(234,217,39)" fg:x="117" fg:w="2"/><text x="15.6650%" y="831.50"></text></g><g><title>std::sys::pal::unix::stack_overflow::imp::current_guard (2 samples, 0.26%)</title><rect x="15.4150%" y="805" width="0.2635%" height="15" fill="rgb(207,178,40)" fg:x="117" fg:w="2"/><text x="15.6650%" y="815.50"></text></g><g><title>pthread_getattr_np (2 samples, 0.26%)</title><rect x="15.4150%" y="789" width="0.2635%" height="15" fill="rgb(221,136,13)" fg:x="117" fg:w="2"/><text x="15.6650%" y="799.50"></text></g><g><title>malloc (2 samples, 0.26%)</title><rect x="15.4150%" y="773" width="0.2635%" height="15" fill="rgb(249,199,10)" fg:x="117" fg:w="2"/><text x="15.6650%" y="783.50"></text></g><g><title>[libc.so.6] (2 samples, 0.26%)</title><rect x="15.4150%" y="757" width="0.2635%" height="15" fill="rgb(249,222,13)" fg:x="117" fg:w="2"/><text x="15.6650%" y="767.50"></text></g><g><title>[libc.so.6] (2 samples, 0.26%)</title><rect x="15.4150%" y="741" width="0.2635%" height="15" fill="rgb(244,185,38)" fg:x="117" fg:w="2"/><text x="15.6650%" y="751.50"></text></g><g><title>std::fs::File::sync_all (1 samples, 0.13%)</title><rect x="15.6785%" y="869" width="0.1318%" height="15" fill="rgb(236,202,9)" fg:x="119" fg:w="1"/><text x="15.9285%" y="879.50"></text></g><g><title>[shmrd] (2 samples, 0.26%)</title><rect x="15.6785%" y="885" width="0.2635%" height="15" fill="rgb(250,229,37)" fg:x="119" fg:w="2"/><text x="15.9285%" y="895.50"></text></g><g><title>unsafe_libyaml::emitter::yaml_emitter_check_simple_key (1 samples, 0.13%)</title><rect x="15.8103%" y="869" width="0.1318%" height="15" fill="rgb(206,174,23)" fg:x="120" fg:w="1"/><text x="16.0603%" y="879.50"></text></g><g><title>&lt;&amp;mut serde_yaml::de::DeserializerFromEvents as serde::de::Deserializer&gt;::deserialize_map (1 samples, 0.13%)</title><rect x="44.5323%" y="869" width="0.1318%" height="15" fill="rgb(211,33,43)" fg:x="338" fg:w="1"/><text x="44.7823%" y="879.50"></text></g><g><title>[libc.so.6] (2 samples, 0.26%)</title><rect x="44.6640%" y="869" width="0.2635%" height="15" fill="rgb(245,58,50)" fg:x="339" fg:w="2"/><text x="44.9140%" y="879.50"></text></g><g><title>[libfuse3.so.3.16.2] (2 samples, 0.26%)</title><rect x="44.9275%" y="869" width="0.2635%" height="15" fill="rgb(244,68,36)" fg:x="341" fg:w="2"/><text x="45.1775%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.13%)</title><rect x="45.1910%" y="869" width="0.1318%" height="15" fill="rgb(232,229,15)" fg:x="343" fg:w="1"/><text x="45.4410%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.13%)</title><rect x="45.1910%" y="853" width="0.1318%" height="15" fill="rgb(254,30,23)" fg:x="343" fg:w="1"/><text x="45.4410%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;env_logger::logger::Builder&gt; (1 samples, 0.13%)</title><rect x="45.3228%" y="869" width="0.1318%" height="15" fill="rgb(235,160,14)" fg:x="344" fg:w="1"/><text x="45.5728%" y="879.50"></text></g><g><title>shmr2::types::Inode::update_metadata (1 samples, 0.13%)</title><rect x="45.4545%" y="869" width="0.1318%" height="15" fill="rgb(212,155,44)" fg:x="345" fg:w="1"/><text x="45.7045%" y="879.50"></text></g><g><title>&lt;shmr2::vfs::path::VirtualPath as core::clone::Clone&gt;::clone (1 samples, 0.13%)</title><rect x="45.7181%" y="853" width="0.1318%" height="15" fill="rgb(226,2,50)" fg:x="347" fg:w="1"/><text x="45.9681%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.13%)</title><rect x="45.7181%" y="837" width="0.1318%" height="15" fill="rgb(234,177,6)" fg:x="347" fg:w="1"/><text x="45.9681%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.13%)</title><rect x="45.7181%" y="821" width="0.1318%" height="15" fill="rgb(217,24,9)" fg:x="347" fg:w="1"/><text x="45.9681%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.13%)</title><rect x="45.7181%" y="805" width="0.1318%" height="15" fill="rgb(220,13,46)" fg:x="347" fg:w="1"/><text x="45.9681%" y="815.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.13%)</title><rect x="45.7181%" y="789" width="0.1318%" height="15" fill="rgb(239,221,27)" fg:x="347" fg:w="1"/><text x="45.9681%" y="799.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.13%)</title><rect x="45.7181%" y="773" width="0.1318%" height="15" fill="rgb(222,198,25)" fg:x="347" fg:w="1"/><text x="45.9681%" y="783.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.13%)</title><rect x="45.7181%" y="757" width="0.1318%" height="15" fill="rgb(211,99,13)" fg:x="347" fg:w="1"/><text x="45.9681%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.13%)</title><rect x="45.7181%" y="741" width="0.1318%" height="15" fill="rgb(232,111,31)" fg:x="347" fg:w="1"/><text x="45.9681%" y="751.50"></text></g><g><title>shmr2::vfs::block::VirtualBlock::open_handles (3 samples, 0.40%)</title><rect x="45.5863%" y="869" width="0.3953%" height="15" fill="rgb(245,82,37)" fg:x="346" fg:w="3"/><text x="45.8363%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;(std::path::PathBuf,std::path::PathBuf)&gt; (1 samples, 0.13%)</title><rect x="45.8498%" y="853" width="0.1318%" height="15" fill="rgb(227,149,46)" fg:x="348" fg:w="1"/><text x="46.0998%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::path::PathBuf&gt; (1 samples, 0.13%)</title><rect x="45.8498%" y="837" width="0.1318%" height="15" fill="rgb(218,36,50)" fg:x="348" fg:w="1"/><text x="46.0998%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::ffi::os_str::OsString&gt; (1 samples, 0.13%)</title><rect x="45.8498%" y="821" width="0.1318%" height="15" fill="rgb(226,80,48)" fg:x="348" fg:w="1"/><text x="46.0998%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::os_str::bytes::Buf&gt; (1 samples, 0.13%)</title><rect x="45.8498%" y="805" width="0.1318%" height="15" fill="rgb(238,224,15)" fg:x="348" fg:w="1"/><text x="46.0998%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.13%)</title><rect x="45.8498%" y="789" width="0.1318%" height="15" fill="rgb(241,136,10)" fg:x="348" fg:w="1"/><text x="46.0998%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.13%)</title><rect x="45.8498%" y="773" width="0.1318%" height="15" fill="rgb(208,32,45)" fg:x="348" fg:w="1"/><text x="46.0998%" y="783.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.13%)</title><rect x="45.8498%" y="757" width="0.1318%" height="15" fill="rgb(207,135,9)" fg:x="348" fg:w="1"/><text x="46.0998%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.13%)</title><rect x="45.8498%" y="741" width="0.1318%" height="15" fill="rgb(206,86,44)" fg:x="348" fg:w="1"/><text x="46.0998%" y="751.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.13%)</title><rect x="45.8498%" y="725" width="0.1318%" height="15" fill="rgb(245,177,15)" fg:x="348" fg:w="1"/><text x="46.0998%" y="735.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.13%)</title><rect x="45.8498%" y="709" width="0.1318%" height="15" fill="rgb(206,64,50)" fg:x="348" fg:w="1"/><text x="46.0998%" y="719.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.13%)</title><rect x="45.8498%" y="693" width="0.1318%" height="15" fill="rgb(234,36,40)" fg:x="348" fg:w="1"/><text x="46.0998%" y="703.50"></text></g><g><title>[unknown] (229 samples, 30.17%)</title><rect x="15.9420%" y="885" width="30.1713%" height="15" fill="rgb(213,64,8)" fg:x="121" fg:w="229"/><text x="16.1920%" y="895.50">[unknown]</text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.13%)</title><rect x="45.9816%" y="869" width="0.1318%" height="15" fill="rgb(210,75,36)" fg:x="349" fg:w="1"/><text x="46.2316%" y="879.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.13%)</title><rect x="46.1133%" y="805" width="0.1318%" height="15" fill="rgb(229,88,21)" fg:x="350" fg:w="1"/><text x="46.3633%" y="815.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.13%)</title><rect x="46.1133%" y="789" width="0.1318%" height="15" fill="rgb(252,204,47)" fg:x="350" fg:w="1"/><text x="46.3633%" y="799.50"></text></g><g><title>exit (2 samples, 0.26%)</title><rect x="46.1133%" y="837" width="0.2635%" height="15" fill="rgb(208,77,27)" fg:x="350" fg:w="2"/><text x="46.3633%" y="847.50"></text></g><g><title>[libc.so.6] (2 samples, 0.26%)</title><rect x="46.1133%" y="821" width="0.2635%" height="15" fill="rgb(221,76,26)" fg:x="350" fg:w="2"/><text x="46.3633%" y="831.50"></text></g><g><title>_fini (1 samples, 0.13%)</title><rect x="46.2451%" y="805" width="0.1318%" height="15" fill="rgb(225,139,18)" fg:x="351" fg:w="1"/><text x="46.4951%" y="815.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.13%)</title><rect x="46.5086%" y="821" width="0.1318%" height="15" fill="rgb(230,137,11)" fg:x="353" fg:w="1"/><text x="46.7586%" y="831.50"></text></g><g><title>__isoc23_sscanf (1 samples, 0.13%)</title><rect x="46.5086%" y="805" width="0.1318%" height="15" fill="rgb(212,28,1)" fg:x="353" fg:w="1"/><text x="46.7586%" y="815.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="46.5086%" y="789" width="0.1318%" height="15" fill="rgb(248,164,17)" fg:x="353" fg:w="1"/><text x="46.7586%" y="799.50"></text></g><g><title>clap_builder::derive::Parser::parse (1 samples, 0.13%)</title><rect x="46.6403%" y="773" width="0.1318%" height="15" fill="rgb(222,171,42)" fg:x="354" fg:w="1"/><text x="46.8903%" y="783.50"></text></g><g><title>clap_builder::builder::command::Command::get_matches (1 samples, 0.13%)</title><rect x="46.6403%" y="757" width="0.1318%" height="15" fill="rgb(243,84,45)" fg:x="354" fg:w="1"/><text x="46.8903%" y="767.50"></text></g><g><title>clap_builder::builder::command::Command::get_matches_from (1 samples, 0.13%)</title><rect x="46.6403%" y="741" width="0.1318%" height="15" fill="rgb(252,49,23)" fg:x="354" fg:w="1"/><text x="46.8903%" y="751.50"></text></g><g><title>clap_builder::builder::command::Command::try_get_matches_from_mut (1 samples, 0.13%)</title><rect x="46.6403%" y="725" width="0.1318%" height="15" fill="rgb(215,19,7)" fg:x="354" fg:w="1"/><text x="46.8903%" y="735.50"></text></g><g><title>clap_builder::builder::command::Command::_do_parse (1 samples, 0.13%)</title><rect x="46.6403%" y="709" width="0.1318%" height="15" fill="rgb(238,81,41)" fg:x="354" fg:w="1"/><text x="46.8903%" y="719.50"></text></g><g><title>clap_builder::parser::parser::Parser::get_matches_with (1 samples, 0.13%)</title><rect x="46.6403%" y="693" width="0.1318%" height="15" fill="rgb(210,199,37)" fg:x="354" fg:w="1"/><text x="46.8903%" y="703.50"></text></g><g><title>clap_builder::parser::parser::Parser::parse_long_arg (1 samples, 0.13%)</title><rect x="46.6403%" y="677" width="0.1318%" height="15" fill="rgb(244,192,49)" fg:x="354" fg:w="1"/><text x="46.8903%" y="687.50"></text></g><g><title>clap_builder::parser::parser::Parser::parse_opt_value (1 samples, 0.13%)</title><rect x="46.6403%" y="661" width="0.1318%" height="15" fill="rgb(226,211,11)" fg:x="354" fg:w="1"/><text x="46.8903%" y="671.50"></text></g><g><title>clap_builder::parser::parser::Parser::resolve_pending (1 samples, 0.13%)</title><rect x="46.6403%" y="645" width="0.1318%" height="15" fill="rgb(236,162,54)" fg:x="354" fg:w="1"/><text x="46.8903%" y="655.50"></text></g><g><title>clap_builder::parser::parser::Parser::react (1 samples, 0.13%)</title><rect x="46.6403%" y="629" width="0.1318%" height="15" fill="rgb(220,229,9)" fg:x="354" fg:w="1"/><text x="46.8903%" y="639.50"></text></g><g><title>clap_builder::parser::parser::Parser::start_custom_arg (1 samples, 0.13%)</title><rect x="46.6403%" y="613" width="0.1318%" height="15" fill="rgb(250,87,22)" fg:x="354" fg:w="1"/><text x="46.8903%" y="623.50"></text></g><g><title>&lt;std::ffi::os_str::OsString as core::convert::From&lt;&amp;T&gt;&gt;::from (1 samples, 0.13%)</title><rect x="46.6403%" y="597" width="0.1318%" height="15" fill="rgb(239,43,17)" fg:x="354" fg:w="1"/><text x="46.8903%" y="607.50"></text></g><g><title>std::ffi::os_str::OsStr::to_os_string (1 samples, 0.13%)</title><rect x="46.6403%" y="581" width="0.1318%" height="15" fill="rgb(231,177,25)" fg:x="354" fg:w="1"/><text x="46.8903%" y="591.50"></text></g><g><title>std::sys::os_str::bytes::Slice::to_owned (1 samples, 0.13%)</title><rect x="46.6403%" y="565" width="0.1318%" height="15" fill="rgb(219,179,1)" fg:x="354" fg:w="1"/><text x="46.8903%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.13%)</title><rect x="46.6403%" y="549" width="0.1318%" height="15" fill="rgb(238,219,53)" fg:x="354" fg:w="1"/><text x="46.8903%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.13%)</title><rect x="46.6403%" y="533" width="0.1318%" height="15" fill="rgb(232,167,36)" fg:x="354" fg:w="1"/><text x="46.8903%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.13%)</title><rect x="46.6403%" y="517" width="0.1318%" height="15" fill="rgb(244,19,51)" fg:x="354" fg:w="1"/><text x="46.8903%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.13%)</title><rect x="46.6403%" y="501" width="0.1318%" height="15" fill="rgb(224,6,22)" fg:x="354" fg:w="1"/><text x="46.8903%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.13%)</title><rect x="46.6403%" y="485" width="0.1318%" height="15" fill="rgb(224,145,5)" fg:x="354" fg:w="1"/><text x="46.8903%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.13%)</title><rect x="46.6403%" y="469" width="0.1318%" height="15" fill="rgb(234,130,49)" fg:x="354" fg:w="1"/><text x="46.8903%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1 samples, 0.13%)</title><rect x="46.6403%" y="453" width="0.1318%" height="15" fill="rgb(254,6,2)" fg:x="354" fg:w="1"/><text x="46.8903%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.13%)</title><rect x="46.6403%" y="437" width="0.1318%" height="15" fill="rgb(208,96,46)" fg:x="354" fg:w="1"/><text x="46.8903%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.13%)</title><rect x="46.6403%" y="421" width="0.1318%" height="15" fill="rgb(239,3,39)" fg:x="354" fg:w="1"/><text x="46.8903%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.13%)</title><rect x="46.6403%" y="405" width="0.1318%" height="15" fill="rgb(233,210,1)" fg:x="354" fg:w="1"/><text x="46.8903%" y="415.50"></text></g><g><title>__rdl_alloc (1 samples, 0.13%)</title><rect x="46.6403%" y="389" width="0.1318%" height="15" fill="rgb(244,137,37)" fg:x="354" fg:w="1"/><text x="46.8903%" y="399.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.13%)</title><rect x="46.6403%" y="373" width="0.1318%" height="15" fill="rgb(240,136,2)" fg:x="354" fg:w="1"/><text x="46.8903%" y="383.50"></text></g><g><title>malloc (1 samples, 0.13%)</title><rect x="46.6403%" y="357" width="0.1318%" height="15" fill="rgb(239,18,37)" fg:x="354" fg:w="1"/><text x="46.8903%" y="367.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="46.6403%" y="341" width="0.1318%" height="15" fill="rgb(218,185,22)" fg:x="354" fg:w="1"/><text x="46.8903%" y="351.50"></text></g><g><title>&lt;fuser::session::Session&lt;FS&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.13%)</title><rect x="46.7721%" y="709" width="0.1318%" height="15" fill="rgb(225,218,4)" fg:x="355" fg:w="1"/><text x="47.0221%" y="719.50"></text></g><g><title>log::__private_api::log (1 samples, 0.13%)</title><rect x="46.7721%" y="693" width="0.1318%" height="15" fill="rgb(230,182,32)" fg:x="355" fg:w="1"/><text x="47.0221%" y="703.50"></text></g><g><title>log::__private_api::log_impl (1 samples, 0.13%)</title><rect x="46.7721%" y="677" width="0.1318%" height="15" fill="rgb(242,56,43)" fg:x="355" fg:w="1"/><text x="47.0221%" y="687.50"></text></g><g><title>&lt;env_logger::logger::Logger as log::Log&gt;::log (1 samples, 0.13%)</title><rect x="46.7721%" y="661" width="0.1318%" height="15" fill="rgb(233,99,24)" fg:x="355" fg:w="1"/><text x="47.0221%" y="671.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.13%)</title><rect x="46.7721%" y="645" width="0.1318%" height="15" fill="rgb(234,209,42)" fg:x="355" fg:w="1"/><text x="47.0221%" y="655.50"></text></g><g><title>&lt;env_logger::logger::Logger as log::Log&gt;::log::_{{closure}} (1 samples, 0.13%)</title><rect x="46.7721%" y="629" width="0.1318%" height="15" fill="rgb(227,7,12)" fg:x="355" fg:w="1"/><text x="47.0221%" y="639.50"></text></g><g><title>&lt;env_logger::logger::Logger as log::Log&gt;::log::_{{closure}} (1 samples, 0.13%)</title><rect x="46.7721%" y="613" width="0.1318%" height="15" fill="rgb(245,203,43)" fg:x="355" fg:w="1"/><text x="47.0221%" y="623.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (1 samples, 0.13%)</title><rect x="46.7721%" y="597" width="0.1318%" height="15" fill="rgb(238,205,33)" fg:x="355" fg:w="1"/><text x="47.0221%" y="607.50"></text></g><g><title>env_logger::fmt::Builder::build::_{{closure}} (1 samples, 0.13%)</title><rect x="46.7721%" y="581" width="0.1318%" height="15" fill="rgb(231,56,7)" fg:x="355" fg:w="1"/><text x="47.0221%" y="591.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write (1 samples, 0.13%)</title><rect x="46.7721%" y="565" width="0.1318%" height="15" fill="rgb(244,186,29)" fg:x="355" fg:w="1"/><text x="47.0221%" y="575.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_timestamp (1 samples, 0.13%)</title><rect x="46.7721%" y="549" width="0.1318%" height="15" fill="rgb(234,111,31)" fg:x="355" fg:w="1"/><text x="47.0221%" y="559.50"></text></g><g><title>env_logger::fmt::DefaultFormat::write_header_value (1 samples, 0.13%)</title><rect x="46.7721%" y="533" width="0.1318%" height="15" fill="rgb(241,149,10)" fg:x="355" fg:w="1"/><text x="47.0221%" y="543.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.13%)</title><rect x="46.7721%" y="517" width="0.1318%" height="15" fill="rgb(249,206,44)" fg:x="355" fg:w="1"/><text x="47.0221%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.13%)</title><rect x="46.7721%" y="501" width="0.1318%" height="15" fill="rgb(251,153,30)" fg:x="355" fg:w="1"/><text x="47.0221%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.13%)</title><rect x="46.7721%" y="485" width="0.1318%" height="15" fill="rgb(239,152,38)" fg:x="355" fg:w="1"/><text x="47.0221%" y="495.50"></text></g><g><title>&lt;env_logger::fmt::StyledValue&lt;T&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.13%)</title><rect x="46.7721%" y="469" width="0.1318%" height="15" fill="rgb(249,139,47)" fg:x="355" fg:w="1"/><text x="47.0221%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.13%)</title><rect x="46.7721%" y="453" width="0.1318%" height="15" fill="rgb(244,64,35)" fg:x="355" fg:w="1"/><text x="47.0221%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.13%)</title><rect x="46.7721%" y="437" width="0.1318%" height="15" fill="rgb(216,46,15)" fg:x="355" fg:w="1"/><text x="47.0221%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.13%)</title><rect x="46.7721%" y="421" width="0.1318%" height="15" fill="rgb(250,74,19)" fg:x="355" fg:w="1"/><text x="47.0221%" y="431.50"></text></g><g><title>anstyle::style::Style::fmt_to (1 samples, 0.13%)</title><rect x="46.7721%" y="405" width="0.1318%" height="15" fill="rgb(249,42,33)" fg:x="355" fg:w="1"/><text x="47.0221%" y="415.50"></text></g><g><title>anstyle::color::Color::render_fg (1 samples, 0.13%)</title><rect x="46.7721%" y="389" width="0.1318%" height="15" fill="rgb(242,149,17)" fg:x="355" fg:w="1"/><text x="47.0221%" y="399.50"></text></g><g><title>anstyle::color::DisplayBuffer::write_str (1 samples, 0.13%)</title><rect x="46.7721%" y="373" width="0.1318%" height="15" fill="rgb(244,29,21)" fg:x="355" fg:w="1"/><text x="47.0221%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;fuser::session::Session&lt;shmr2::ShmrFs&gt;&gt; (2 samples, 0.26%)</title><rect x="46.7721%" y="725" width="0.2635%" height="15" fill="rgb(220,130,37)" fg:x="355" fg:w="2"/><text x="47.0221%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;shmr2::ShmrFs&gt; (1 samples, 0.13%)</title><rect x="46.9038%" y="709" width="0.1318%" height="15" fill="rgb(211,67,2)" fg:x="356" fg:w="1"/><text x="47.1538%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;shmr2::config::ShmrFsConfig&gt; (1 samples, 0.13%)</title><rect x="46.9038%" y="693" width="0.1318%" height="15" fill="rgb(235,68,52)" fg:x="356" fg:w="1"/><text x="47.1538%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,std::collections::hash::map::HashMap&lt;alloc::string::String,shmr2::config::Bucket&gt;&gt;&gt; (1 samples, 0.13%)</title><rect x="46.9038%" y="677" width="0.1318%" height="15" fill="rgb(246,142,3)" fg:x="356" fg:w="1"/><text x="47.1538%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,std::collections::hash::map::HashMap&lt;alloc::string::String,shmr2::config::Bucket&gt;,std::hash::random::RandomState&gt;&gt; (1 samples, 0.13%)</title><rect x="46.9038%" y="661" width="0.1318%" height="15" fill="rgb(241,25,7)" fg:x="356" fg:w="1"/><text x="47.1538%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,std::collections::hash::map::HashMap&lt;alloc::string::String,shmr2::config::Bucket&gt;)&gt;&gt; (1 samples, 0.13%)</title><rect x="46.9038%" y="645" width="0.1318%" height="15" fill="rgb(242,119,39)" fg:x="356" fg:w="1"/><text x="47.1538%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.13%)</title><rect x="46.9038%" y="629" width="0.1318%" height="15" fill="rgb(241,98,45)" fg:x="356" fg:w="1"/><text x="47.1538%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 0.13%)</title><rect x="46.9038%" y="613" width="0.1318%" height="15" fill="rgb(254,28,30)" fg:x="356" fg:w="1"/><text x="47.1538%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (1 samples, 0.13%)</title><rect x="46.9038%" y="597" width="0.1318%" height="15" fill="rgb(241,142,54)" fg:x="356" fg:w="1"/><text x="47.1538%" y="607.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.13%)</title><rect x="46.9038%" y="581" width="0.1318%" height="15" fill="rgb(222,85,15)" fg:x="356" fg:w="1"/><text x="47.1538%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.13%)</title><rect x="46.9038%" y="565" width="0.1318%" height="15" fill="rgb(210,85,47)" fg:x="356" fg:w="1"/><text x="47.1538%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,std::collections::hash::map::HashMap&lt;alloc::string::String,shmr2::config::Bucket&gt;)&gt; (1 samples, 0.13%)</title><rect x="46.9038%" y="549" width="0.1318%" height="15" fill="rgb(224,206,25)" fg:x="356" fg:w="1"/><text x="47.1538%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::string::String,shmr2::config::Bucket&gt;&gt; (1 samples, 0.13%)</title><rect x="46.9038%" y="533" width="0.1318%" height="15" fill="rgb(243,201,19)" fg:x="356" fg:w="1"/><text x="47.1538%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,shmr2::config::Bucket,std::hash::random::RandomState&gt;&gt; (1 samples, 0.13%)</title><rect x="46.9038%" y="517" width="0.1318%" height="15" fill="rgb(236,59,4)" fg:x="356" fg:w="1"/><text x="47.1538%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,shmr2::config::Bucket)&gt;&gt; (1 samples, 0.13%)</title><rect x="46.9038%" y="501" width="0.1318%" height="15" fill="rgb(254,179,45)" fg:x="356" fg:w="1"/><text x="47.1538%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.13%)</title><rect x="46.9038%" y="485" width="0.1318%" height="15" fill="rgb(226,14,10)" fg:x="356" fg:w="1"/><text x="47.1538%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 0.13%)</title><rect x="46.9038%" y="469" width="0.1318%" height="15" fill="rgb(244,27,41)" fg:x="356" fg:w="1"/><text x="47.1538%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (1 samples, 0.13%)</title><rect x="46.9038%" y="453" width="0.1318%" height="15" fill="rgb(235,35,32)" fg:x="356" fg:w="1"/><text x="47.1538%" y="463.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (1 samples, 0.13%)</title><rect x="46.9038%" y="437" width="0.1318%" height="15" fill="rgb(218,68,31)" fg:x="356" fg:w="1"/><text x="47.1538%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1 samples, 0.13%)</title><rect x="46.9038%" y="421" width="0.1318%" height="15" fill="rgb(207,120,37)" fg:x="356" fg:w="1"/><text x="47.1538%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,shmr2::config::Bucket)&gt; (1 samples, 0.13%)</title><rect x="46.9038%" y="405" width="0.1318%" height="15" fill="rgb(227,98,0)" fg:x="356" fg:w="1"/><text x="47.1538%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;shmr2::config::Bucket&gt; (1 samples, 0.13%)</title><rect x="46.9038%" y="389" width="0.1318%" height="15" fill="rgb(207,7,3)" fg:x="356" fg:w="1"/><text x="47.1538%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::path::PathBuf&gt; (1 samples, 0.13%)</title><rect x="46.9038%" y="373" width="0.1318%" height="15" fill="rgb(206,98,19)" fg:x="356" fg:w="1"/><text x="47.1538%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::ffi::os_str::OsString&gt; (1 samples, 0.13%)</title><rect x="46.9038%" y="357" width="0.1318%" height="15" fill="rgb(217,5,26)" fg:x="356" fg:w="1"/><text x="47.1538%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::os_str::bytes::Buf&gt; (1 samples, 0.13%)</title><rect x="46.9038%" y="341" width="0.1318%" height="15" fill="rgb(235,190,38)" fg:x="356" fg:w="1"/><text x="47.1538%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.13%)</title><rect x="46.9038%" y="325" width="0.1318%" height="15" fill="rgb(247,86,24)" fg:x="356" fg:w="1"/><text x="47.1538%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.13%)</title><rect x="46.9038%" y="309" width="0.1318%" height="15" fill="rgb(205,101,16)" fg:x="356" fg:w="1"/><text x="47.1538%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.13%)</title><rect x="46.9038%" y="293" width="0.1318%" height="15" fill="rgb(246,168,33)" fg:x="356" fg:w="1"/><text x="47.1538%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.13%)</title><rect x="46.9038%" y="277" width="0.1318%" height="15" fill="rgb(231,114,1)" fg:x="356" fg:w="1"/><text x="47.1538%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.13%)</title><rect x="46.9038%" y="261" width="0.1318%" height="15" fill="rgb(207,184,53)" fg:x="356" fg:w="1"/><text x="47.1538%" y="271.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.13%)</title><rect x="46.9038%" y="245" width="0.1318%" height="15" fill="rgb(224,95,51)" fg:x="356" fg:w="1"/><text x="47.1538%" y="255.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.13%)</title><rect x="46.9038%" y="229" width="0.1318%" height="15" fill="rgb(212,188,45)" fg:x="356" fg:w="1"/><text x="47.1538%" y="239.50"></text></g><g><title>cfree (1 samples, 0.13%)</title><rect x="46.9038%" y="213" width="0.1318%" height="15" fill="rgb(223,154,38)" fg:x="356" fg:w="1"/><text x="47.1538%" y="223.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.13%)</title><rect x="47.0356%" y="709" width="0.1318%" height="15" fill="rgb(251,22,52)" fg:x="357" fg:w="1"/><text x="47.2856%" y="719.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.13%)</title><rect x="47.0356%" y="693" width="0.1318%" height="15" fill="rgb(229,209,22)" fg:x="357" fg:w="1"/><text x="47.2856%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (1 samples, 0.13%)</title><rect x="47.0356%" y="677" width="0.1318%" height="15" fill="rgb(234,138,34)" fg:x="357" fg:w="1"/><text x="47.2856%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1 samples, 0.13%)</title><rect x="47.0356%" y="661" width="0.1318%" height="15" fill="rgb(212,95,11)" fg:x="357" fg:w="1"/><text x="47.2856%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (1 samples, 0.13%)</title><rect x="47.0356%" y="645" width="0.1318%" height="15" fill="rgb(240,179,47)" fg:x="357" fg:w="1"/><text x="47.2856%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.13%)</title><rect x="47.0356%" y="629" width="0.1318%" height="15" fill="rgb(240,163,11)" fg:x="357" fg:w="1"/><text x="47.2856%" y="639.50"></text></g><g><title>alloc::alloc::alloc_zeroed (1 samples, 0.13%)</title><rect x="47.0356%" y="613" width="0.1318%" height="15" fill="rgb(236,37,12)" fg:x="357" fg:w="1"/><text x="47.2856%" y="623.50"></text></g><g><title>__rdl_alloc_zeroed (1 samples, 0.13%)</title><rect x="47.0356%" y="597" width="0.1318%" height="15" fill="rgb(232,164,16)" fg:x="357" fg:w="1"/><text x="47.2856%" y="607.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (1 samples, 0.13%)</title><rect x="47.0356%" y="581" width="0.1318%" height="15" fill="rgb(244,205,15)" fg:x="357" fg:w="1"/><text x="47.2856%" y="591.50"></text></g><g><title>__libc_calloc (1 samples, 0.13%)</title><rect x="47.0356%" y="565" width="0.1318%" height="15" fill="rgb(223,117,47)" fg:x="357" fg:w="1"/><text x="47.2856%" y="575.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="47.0356%" y="549" width="0.1318%" height="15" fill="rgb(244,107,35)" fg:x="357" fg:w="1"/><text x="47.2856%" y="559.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="47.0356%" y="533" width="0.1318%" height="15" fill="rgb(205,140,8)" fg:x="357" fg:w="1"/><text x="47.2856%" y="543.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="47.0356%" y="517" width="0.1318%" height="15" fill="rgb(228,84,46)" fg:x="357" fg:w="1"/><text x="47.2856%" y="527.50"></text></g><g><title>fuser::channel::Channel::receive (11 samples, 1.45%)</title><rect x="47.1673%" y="709" width="1.4493%" height="15" fill="rgb(254,188,9)" fg:x="358" fg:w="11"/><text x="47.4173%" y="719.50"></text></g><g><title>read (10 samples, 1.32%)</title><rect x="47.2991%" y="693" width="1.3175%" height="15" fill="rgb(206,112,54)" fg:x="359" fg:w="10"/><text x="47.5491%" y="703.50"></text></g><g><title>[libc.so.6] (6 samples, 0.79%)</title><rect x="47.8261%" y="677" width="0.7905%" height="15" fill="rgb(216,84,49)" fg:x="363" fg:w="6"/><text x="48.0761%" y="687.50"></text></g><g><title>fuser::channel::Channel::sender (1 samples, 0.13%)</title><rect x="48.6166%" y="709" width="0.1318%" height="15" fill="rgb(214,194,35)" fg:x="369" fg:w="1"/><text x="48.8666%" y="719.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.13%)</title><rect x="48.6166%" y="693" width="0.1318%" height="15" fill="rgb(249,28,3)" fg:x="369" fg:w="1"/><text x="48.8666%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.13%)</title><rect x="48.6166%" y="677" width="0.1318%" height="15" fill="rgb(222,56,52)" fg:x="369" fg:w="1"/><text x="48.8666%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.13%)</title><rect x="48.6166%" y="661" width="0.1318%" height="15" fill="rgb(245,217,50)" fg:x="369" fg:w="1"/><text x="48.8666%" y="671.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.13%)</title><rect x="49.0119%" y="677" width="0.1318%" height="15" fill="rgb(213,201,24)" fg:x="372" fg:w="1"/><text x="49.2619%" y="687.50"></text></g><g><title>fuser::request::Request::reply (1 samples, 0.13%)</title><rect x="49.1436%" y="677" width="0.1318%" height="15" fill="rgb(248,116,28)" fg:x="373" fg:w="1"/><text x="49.3936%" y="687.50"></text></g><g><title>&lt;fuser::reply::ReplyAttr as fuser::reply::Reply&gt;::new (1 samples, 0.13%)</title><rect x="49.1436%" y="661" width="0.1318%" height="15" fill="rgb(219,72,43)" fg:x="373" fg:w="1"/><text x="49.3936%" y="671.50"></text></g><g><title>&lt;fuser::reply::ReplyRaw as fuser::reply::Reply&gt;::new (1 samples, 0.13%)</title><rect x="49.1436%" y="645" width="0.1318%" height="15" fill="rgb(209,138,14)" fg:x="373" fg:w="1"/><text x="49.3936%" y="655.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.13%)</title><rect x="49.1436%" y="629" width="0.1318%" height="15" fill="rgb(222,18,33)" fg:x="373" fg:w="1"/><text x="49.3936%" y="639.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.13%)</title><rect x="49.1436%" y="613" width="0.1318%" height="15" fill="rgb(213,199,7)" fg:x="373" fg:w="1"/><text x="49.3936%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.13%)</title><rect x="49.1436%" y="597" width="0.1318%" height="15" fill="rgb(250,110,10)" fg:x="373" fg:w="1"/><text x="49.3936%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.13%)</title><rect x="49.1436%" y="581" width="0.1318%" height="15" fill="rgb(248,123,6)" fg:x="373" fg:w="1"/><text x="49.3936%" y="591.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.13%)</title><rect x="49.1436%" y="565" width="0.1318%" height="15" fill="rgb(206,91,31)" fg:x="373" fg:w="1"/><text x="49.3936%" y="575.50"></text></g><g><title>__rdl_alloc (1 samples, 0.13%)</title><rect x="49.1436%" y="549" width="0.1318%" height="15" fill="rgb(211,154,13)" fg:x="373" fg:w="1"/><text x="49.3936%" y="559.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.13%)</title><rect x="49.1436%" y="533" width="0.1318%" height="15" fill="rgb(225,148,7)" fg:x="373" fg:w="1"/><text x="49.3936%" y="543.50"></text></g><g><title>malloc (1 samples, 0.13%)</title><rect x="49.1436%" y="517" width="0.1318%" height="15" fill="rgb(220,160,43)" fg:x="373" fg:w="1"/><text x="49.3936%" y="527.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.40%)</title><rect x="49.2754%" y="645" width="0.3953%" height="15" fill="rgb(213,52,39)" fg:x="374" fg:w="3"/><text x="49.5254%" y="655.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (16 samples, 2.11%)</title><rect x="50.4611%" y="629" width="2.1080%" height="15" fill="rgb(243,137,7)" fg:x="383" fg:w="16"/><text x="50.7111%" y="639.50">&lt;..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (16 samples, 2.11%)</title><rect x="50.4611%" y="613" width="2.1080%" height="15" fill="rgb(230,79,13)" fg:x="383" fg:w="16"/><text x="50.7111%" y="623.50">a..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (16 samples, 2.11%)</title><rect x="50.4611%" y="597" width="2.1080%" height="15" fill="rgb(247,105,23)" fg:x="383" fg:w="16"/><text x="50.7111%" y="607.50">c..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.26%)</title><rect x="52.5692%" y="629" width="0.2635%" height="15" fill="rgb(223,179,41)" fg:x="399" fg:w="2"/><text x="52.8192%" y="639.50"></text></g><g><title>std::sync::poison::Flag::done (1 samples, 0.13%)</title><rect x="52.8327%" y="597" width="0.1318%" height="15" fill="rgb(218,9,34)" fg:x="401" fg:w="1"/><text x="53.0827%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;(shmr2::vfs::path::VirtualPath,std::fs::File)&gt;&gt;&gt; (8 samples, 1.05%)</title><rect x="52.8327%" y="629" width="1.0540%" height="15" fill="rgb(222,106,8)" fg:x="401" fg:w="8"/><text x="53.0827%" y="639.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 1.05%)</title><rect x="52.8327%" y="613" width="1.0540%" height="15" fill="rgb(211,220,0)" fg:x="401" fg:w="8"/><text x="53.0827%" y="623.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (7 samples, 0.92%)</title><rect x="52.9644%" y="597" width="0.9223%" height="15" fill="rgb(229,52,16)" fg:x="402" fg:w="7"/><text x="53.2144%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (7 samples, 0.92%)</title><rect x="52.9644%" y="581" width="0.9223%" height="15" fill="rgb(212,155,18)" fg:x="402" fg:w="7"/><text x="53.2144%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_swap (7 samples, 0.92%)</title><rect x="52.9644%" y="565" width="0.9223%" height="15" fill="rgb(242,21,14)" fg:x="402" fg:w="7"/><text x="53.2144%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (6 samples, 0.79%)</title><rect x="53.8867%" y="629" width="0.7905%" height="15" fill="rgb(222,19,48)" fg:x="409" fg:w="6"/><text x="54.1367%" y="639.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.79%)</title><rect x="53.8867%" y="613" width="0.7905%" height="15" fill="rgb(232,45,27)" fg:x="409" fg:w="6"/><text x="54.1367%" y="623.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (6 samples, 0.79%)</title><rect x="53.8867%" y="597" width="0.7905%" height="15" fill="rgb(249,103,42)" fg:x="409" fg:w="6"/><text x="54.1367%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (6 samples, 0.79%)</title><rect x="53.8867%" y="581" width="0.7905%" height="15" fill="rgb(246,81,33)" fg:x="409" fg:w="6"/><text x="54.1367%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_swap (6 samples, 0.79%)</title><rect x="53.8867%" y="565" width="0.7905%" height="15" fill="rgb(252,33,42)" fg:x="409" fg:w="6"/><text x="54.1367%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (6 samples, 0.79%)</title><rect x="54.6772%" y="629" width="0.7905%" height="15" fill="rgb(209,212,41)" fg:x="415" fg:w="6"/><text x="54.9272%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_load (6 samples, 0.79%)</title><rect x="54.6772%" y="613" width="0.7905%" height="15" fill="rgb(207,154,6)" fg:x="415" fg:w="6"/><text x="54.9272%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (2 samples, 0.26%)</title><rect x="55.4677%" y="629" width="0.2635%" height="15" fill="rgb(223,64,47)" fg:x="421" fg:w="2"/><text x="55.7177%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_store (2 samples, 0.26%)</title><rect x="55.4677%" y="613" width="0.2635%" height="15" fill="rgb(211,161,38)" fg:x="421" fg:w="2"/><text x="55.7177%" y="623.50"></text></g><g><title>fsync (5 samples, 0.66%)</title><rect x="55.7312%" y="629" width="0.6588%" height="15" fill="rgb(219,138,40)" fg:x="423" fg:w="5"/><text x="55.9812%" y="639.50"></text></g><g><title>log::max_level (5 samples, 0.66%)</title><rect x="56.3900%" y="629" width="0.6588%" height="15" fill="rgb(241,228,46)" fg:x="428" fg:w="5"/><text x="56.6400%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (5 samples, 0.66%)</title><rect x="56.3900%" y="613" width="0.6588%" height="15" fill="rgb(223,209,38)" fg:x="428" fg:w="5"/><text x="56.6400%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_load (5 samples, 0.66%)</title><rect x="56.3900%" y="597" width="0.6588%" height="15" fill="rgb(236,164,45)" fg:x="428" fg:w="5"/><text x="56.6400%" y="607.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.26%)</title><rect x="57.3123%" y="613" width="0.2635%" height="15" fill="rgb(231,15,5)" fg:x="435" fg:w="2"/><text x="57.5623%" y="623.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.13%)</title><rect x="57.5758%" y="613" width="0.1318%" height="15" fill="rgb(252,35,15)" fg:x="437" fg:w="1"/><text x="57.8258%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 1.84%)</title><rect x="57.7075%" y="517" width="1.8445%" height="15" fill="rgb(248,181,18)" fg:x="438" fg:w="14"/><text x="57.9575%" y="527.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14 samples, 1.84%)</title><rect x="57.7075%" y="501" width="1.8445%" height="15" fill="rgb(233,39,42)" fg:x="438" fg:w="14"/><text x="57.9575%" y="511.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (14 samples, 1.84%)</title><rect x="57.7075%" y="485" width="1.8445%" height="15" fill="rgb(238,110,33)" fg:x="438" fg:w="14"/><text x="57.9575%" y="495.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 1.84%)</title><rect x="57.7075%" y="469" width="1.8445%" height="15" fill="rgb(233,195,10)" fg:x="438" fg:w="14"/><text x="57.9575%" y="479.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 1.84%)</title><rect x="57.7075%" y="453" width="1.8445%" height="15" fill="rgb(254,105,3)" fg:x="438" fg:w="14"/><text x="57.9575%" y="463.50">a..</text></g><g><title>alloc::alloc::alloc (14 samples, 1.84%)</title><rect x="57.7075%" y="437" width="1.8445%" height="15" fill="rgb(221,225,9)" fg:x="438" fg:w="14"/><text x="57.9575%" y="447.50">a..</text></g><g><title>__rdl_alloc (14 samples, 1.84%)</title><rect x="57.7075%" y="421" width="1.8445%" height="15" fill="rgb(224,227,45)" fg:x="438" fg:w="14"/><text x="57.9575%" y="431.50">_..</text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (14 samples, 1.84%)</title><rect x="57.7075%" y="405" width="1.8445%" height="15" fill="rgb(229,198,43)" fg:x="438" fg:w="14"/><text x="57.9575%" y="415.50">s..</text></g><g><title>malloc (14 samples, 1.84%)</title><rect x="57.7075%" y="389" width="1.8445%" height="15" fill="rgb(206,209,35)" fg:x="438" fg:w="14"/><text x="57.9575%" y="399.50">m..</text></g><g><title>[libc.so.6] (10 samples, 1.32%)</title><rect x="58.2345%" y="373" width="1.3175%" height="15" fill="rgb(245,195,53)" fg:x="442" fg:w="10"/><text x="58.4845%" y="383.50"></text></g><g><title>[libc.so.6] (3 samples, 0.40%)</title><rect x="59.1568%" y="357" width="0.3953%" height="15" fill="rgb(240,92,26)" fg:x="449" fg:w="3"/><text x="59.4068%" y="367.50"></text></g><g><title>&lt;shmr2::vfs::path::VirtualPath as core::clone::Clone&gt;::clone (15 samples, 1.98%)</title><rect x="57.7075%" y="613" width="1.9763%" height="15" fill="rgb(207,40,23)" fg:x="438" fg:w="15"/><text x="57.9575%" y="623.50">&lt;..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (15 samples, 1.98%)</title><rect x="57.7075%" y="597" width="1.9763%" height="15" fill="rgb(223,111,35)" fg:x="438" fg:w="15"/><text x="57.9575%" y="607.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 1.98%)</title><rect x="57.7075%" y="581" width="1.9763%" height="15" fill="rgb(229,147,28)" fg:x="438" fg:w="15"/><text x="57.9575%" y="591.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (15 samples, 1.98%)</title><rect x="57.7075%" y="565" width="1.9763%" height="15" fill="rgb(211,29,28)" fg:x="438" fg:w="15"/><text x="57.9575%" y="575.50">a..</text></g><g><title>alloc::slice::hack::to_vec (15 samples, 1.98%)</title><rect x="57.7075%" y="549" width="1.9763%" height="15" fill="rgb(228,72,33)" fg:x="438" fg:w="15"/><text x="57.9575%" y="559.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15 samples, 1.98%)</title><rect x="57.7075%" y="533" width="1.9763%" height="15" fill="rgb(205,214,31)" fg:x="438" fg:w="15"/><text x="57.9575%" y="543.50">&lt;..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.13%)</title><rect x="59.5520%" y="517" width="0.1318%" height="15" fill="rgb(224,111,15)" fg:x="452" fg:w="1"/><text x="59.8020%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.13%)</title><rect x="59.5520%" y="501" width="0.1318%" height="15" fill="rgb(253,21,26)" fg:x="452" fg:w="1"/><text x="59.8020%" y="511.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="59.5520%" y="485" width="0.1318%" height="15" fill="rgb(245,139,43)" fg:x="452" fg:w="1"/><text x="59.8020%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.13%)</title><rect x="59.6838%" y="549" width="0.1318%" height="15" fill="rgb(252,170,7)" fg:x="453" fg:w="1"/><text x="59.9338%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9 samples, 1.19%)</title><rect x="59.6838%" y="613" width="1.1858%" height="15" fill="rgb(231,118,14)" fg:x="453" fg:w="9"/><text x="59.9338%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (9 samples, 1.19%)</title><rect x="59.6838%" y="597" width="1.1858%" height="15" fill="rgb(238,83,0)" fg:x="453" fg:w="9"/><text x="59.9338%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (9 samples, 1.19%)</title><rect x="59.6838%" y="581" width="1.1858%" height="15" fill="rgb(221,39,39)" fg:x="453" fg:w="9"/><text x="59.9338%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 1.19%)</title><rect x="59.6838%" y="565" width="1.1858%" height="15" fill="rgb(222,119,46)" fg:x="453" fg:w="9"/><text x="59.9338%" y="575.50"></text></g><g><title>malloc (8 samples, 1.05%)</title><rect x="59.8155%" y="549" width="1.0540%" height="15" fill="rgb(222,165,49)" fg:x="454" fg:w="8"/><text x="60.0655%" y="559.50"></text></g><g><title>[libc.so.6] (7 samples, 0.92%)</title><rect x="59.9473%" y="533" width="0.9223%" height="15" fill="rgb(219,113,52)" fg:x="455" fg:w="7"/><text x="60.1973%" y="543.50"></text></g><g><title>[libc.so.6] (6 samples, 0.79%)</title><rect x="60.0791%" y="517" width="0.7905%" height="15" fill="rgb(214,7,15)" fg:x="456" fg:w="6"/><text x="60.3291%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;(std::path::PathBuf,std::path::PathBuf)&gt; (7 samples, 0.92%)</title><rect x="60.8696%" y="613" width="0.9223%" height="15" fill="rgb(235,32,4)" fg:x="462" fg:w="7"/><text x="61.1196%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::path::PathBuf&gt; (7 samples, 0.92%)</title><rect x="60.8696%" y="597" width="0.9223%" height="15" fill="rgb(238,90,54)" fg:x="462" fg:w="7"/><text x="61.1196%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::ffi::os_str::OsString&gt; (7 samples, 0.92%)</title><rect x="60.8696%" y="581" width="0.9223%" height="15" fill="rgb(213,208,19)" fg:x="462" fg:w="7"/><text x="61.1196%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::os_str::bytes::Buf&gt; (7 samples, 0.92%)</title><rect x="60.8696%" y="565" width="0.9223%" height="15" fill="rgb(233,156,4)" fg:x="462" fg:w="7"/><text x="61.1196%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (7 samples, 0.92%)</title><rect x="60.8696%" y="549" width="0.9223%" height="15" fill="rgb(207,194,5)" fg:x="462" fg:w="7"/><text x="61.1196%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (7 samples, 0.92%)</title><rect x="60.8696%" y="533" width="0.9223%" height="15" fill="rgb(206,111,30)" fg:x="462" fg:w="7"/><text x="61.1196%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.92%)</title><rect x="60.8696%" y="517" width="0.9223%" height="15" fill="rgb(243,70,54)" fg:x="462" fg:w="7"/><text x="61.1196%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.92%)</title><rect x="60.8696%" y="501" width="0.9223%" height="15" fill="rgb(242,28,8)" fg:x="462" fg:w="7"/><text x="61.1196%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.92%)</title><rect x="60.8696%" y="485" width="0.9223%" height="15" fill="rgb(219,106,18)" fg:x="462" fg:w="7"/><text x="61.1196%" y="495.50"></text></g><g><title>__rdl_dealloc (7 samples, 0.92%)</title><rect x="60.8696%" y="469" width="0.9223%" height="15" fill="rgb(244,222,10)" fg:x="462" fg:w="7"/><text x="61.1196%" y="479.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (7 samples, 0.92%)</title><rect x="60.8696%" y="453" width="0.9223%" height="15" fill="rgb(236,179,52)" fg:x="462" fg:w="7"/><text x="61.1196%" y="463.50"></text></g><g><title>cfree (7 samples, 0.92%)</title><rect x="60.8696%" y="437" width="0.9223%" height="15" fill="rgb(213,23,39)" fg:x="462" fg:w="7"/><text x="61.1196%" y="447.50"></text></g><g><title>[libc.so.6] (5 samples, 0.66%)</title><rect x="61.1331%" y="421" width="0.6588%" height="15" fill="rgb(238,48,10)" fg:x="464" fg:w="5"/><text x="61.3831%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.26%)</title><rect x="61.7918%" y="597" width="0.2635%" height="15" fill="rgb(251,196,23)" fg:x="469" fg:w="2"/><text x="62.0418%" y="607.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::index (2 samples, 0.26%)</title><rect x="61.7918%" y="581" width="0.2635%" height="15" fill="rgb(250,152,24)" fg:x="469" fg:w="2"/><text x="62.0418%" y="591.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (2 samples, 0.26%)</title><rect x="61.7918%" y="565" width="0.2635%" height="15" fill="rgb(209,150,17)" fg:x="469" fg:w="2"/><text x="62.0418%" y="575.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (1 samples, 0.13%)</title><rect x="61.9236%" y="549" width="0.1318%" height="15" fill="rgb(234,202,34)" fg:x="470" fg:w="1"/><text x="62.1736%" y="559.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_utf8_char_boundary (1 samples, 0.13%)</title><rect x="61.9236%" y="533" width="0.1318%" height="15" fill="rgb(253,148,53)" fg:x="470" fg:w="1"/><text x="62.1736%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.92%)</title><rect x="62.0553%" y="469" width="0.9223%" height="15" fill="rgb(218,129,16)" fg:x="471" fg:w="7"/><text x="62.3053%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.92%)</title><rect x="62.0553%" y="453" width="0.9223%" height="15" fill="rgb(216,85,19)" fg:x="471" fg:w="7"/><text x="62.3053%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (7 samples, 0.92%)</title><rect x="62.0553%" y="437" width="0.9223%" height="15" fill="rgb(235,228,7)" fg:x="471" fg:w="7"/><text x="62.3053%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.92%)</title><rect x="62.0553%" y="421" width="0.9223%" height="15" fill="rgb(245,175,0)" fg:x="471" fg:w="7"/><text x="62.3053%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.92%)</title><rect x="62.0553%" y="405" width="0.9223%" height="15" fill="rgb(208,168,36)" fg:x="471" fg:w="7"/><text x="62.3053%" y="415.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.92%)</title><rect x="62.0553%" y="389" width="0.9223%" height="15" fill="rgb(246,171,24)" fg:x="471" fg:w="7"/><text x="62.3053%" y="399.50"></text></g><g><title>__rdl_alloc (7 samples, 0.92%)</title><rect x="62.0553%" y="373" width="0.9223%" height="15" fill="rgb(215,142,24)" fg:x="471" fg:w="7"/><text x="62.3053%" y="383.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (7 samples, 0.92%)</title><rect x="62.0553%" y="357" width="0.9223%" height="15" fill="rgb(250,187,7)" fg:x="471" fg:w="7"/><text x="62.3053%" y="367.50"></text></g><g><title>malloc (7 samples, 0.92%)</title><rect x="62.0553%" y="341" width="0.9223%" height="15" fill="rgb(228,66,33)" fg:x="471" fg:w="7"/><text x="62.3053%" y="351.50"></text></g><g><title>shmr2::config::Bucket::path (8 samples, 1.05%)</title><rect x="62.0553%" y="597" width="1.0540%" height="15" fill="rgb(234,215,21)" fg:x="471" fg:w="8"/><text x="62.3053%" y="607.50"></text></g><g><title>&lt;std::path::PathBuf as core::clone::Clone&gt;::clone (8 samples, 1.05%)</title><rect x="62.0553%" y="581" width="1.0540%" height="15" fill="rgb(222,191,20)" fg:x="471" fg:w="8"/><text x="62.3053%" y="591.50"></text></g><g><title>&lt;std::ffi::os_str::OsString as core::clone::Clone&gt;::clone (8 samples, 1.05%)</title><rect x="62.0553%" y="565" width="1.0540%" height="15" fill="rgb(245,79,54)" fg:x="471" fg:w="8"/><text x="62.3053%" y="575.50"></text></g><g><title>&lt;std::sys::os_str::bytes::Buf as core::clone::Clone&gt;::clone (8 samples, 1.05%)</title><rect x="62.0553%" y="549" width="1.0540%" height="15" fill="rgb(240,10,37)" fg:x="471" fg:w="8"/><text x="62.3053%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 1.05%)</title><rect x="62.0553%" y="533" width="1.0540%" height="15" fill="rgb(214,192,32)" fg:x="471" fg:w="8"/><text x="62.3053%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8 samples, 1.05%)</title><rect x="62.0553%" y="517" width="1.0540%" height="15" fill="rgb(209,36,54)" fg:x="471" fg:w="8"/><text x="62.3053%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 1.05%)</title><rect x="62.0553%" y="501" width="1.0540%" height="15" fill="rgb(220,10,11)" fg:x="471" fg:w="8"/><text x="62.3053%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 1.05%)</title><rect x="62.0553%" y="485" width="1.0540%" height="15" fill="rgb(221,106,17)" fg:x="471" fg:w="8"/><text x="62.3053%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.13%)</title><rect x="62.9776%" y="469" width="0.1318%" height="15" fill="rgb(251,142,44)" fg:x="478" fg:w="1"/><text x="63.2276%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.13%)</title><rect x="62.9776%" y="453" width="0.1318%" height="15" fill="rgb(238,13,15)" fg:x="478" fg:w="1"/><text x="63.2276%" y="463.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="62.9776%" y="437" width="0.1318%" height="15" fill="rgb(208,107,27)" fg:x="478" fg:w="1"/><text x="63.2276%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.79%)</title><rect x="63.3729%" y="421" width="0.7905%" height="15" fill="rgb(205,136,37)" fg:x="481" fg:w="6"/><text x="63.6229%" y="431.50"></text></g><g><title>core::hash::sip::u8to64_le (6 samples, 0.79%)</title><rect x="63.3729%" y="405" width="0.7905%" height="15" fill="rgb(250,205,27)" fg:x="481" fg:w="6"/><text x="63.6229%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.53%)</title><rect x="63.6364%" y="389" width="0.5270%" height="15" fill="rgb(210,80,43)" fg:x="483" fg:w="4"/><text x="63.8864%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (9 samples, 1.19%)</title><rect x="63.1094%" y="549" width="1.1858%" height="15" fill="rgb(247,160,36)" fg:x="479" fg:w="9"/><text x="63.3594%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.92%)</title><rect x="63.3729%" y="533" width="0.9223%" height="15" fill="rgb(234,13,49)" fg:x="481" fg:w="7"/><text x="63.6229%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 0.92%)</title><rect x="63.3729%" y="517" width="0.9223%" height="15" fill="rgb(234,122,0)" fg:x="481" fg:w="7"/><text x="63.6229%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (7 samples, 0.92%)</title><rect x="63.3729%" y="501" width="0.9223%" height="15" fill="rgb(207,146,38)" fg:x="481" fg:w="7"/><text x="63.6229%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (7 samples, 0.92%)</title><rect x="63.3729%" y="485" width="0.9223%" height="15" fill="rgb(207,177,25)" fg:x="481" fg:w="7"/><text x="63.6229%" y="495.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write_str (7 samples, 0.92%)</title><rect x="63.3729%" y="469" width="0.9223%" height="15" fill="rgb(211,178,42)" fg:x="481" fg:w="7"/><text x="63.6229%" y="479.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (7 samples, 0.92%)</title><rect x="63.3729%" y="453" width="0.9223%" height="15" fill="rgb(230,69,54)" fg:x="481" fg:w="7"/><text x="63.6229%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (7 samples, 0.92%)</title><rect x="63.3729%" y="437" width="0.9223%" height="15" fill="rgb(214,135,41)" fg:x="481" fg:w="7"/><text x="63.6229%" y="447.50"></text></g><g><title>core::hash::Hasher::write_u8 (1 samples, 0.13%)</title><rect x="64.1634%" y="421" width="0.1318%" height="15" fill="rgb(237,67,25)" fg:x="487" fg:w="1"/><text x="64.4134%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.13%)</title><rect x="64.2951%" y="501" width="0.1318%" height="15" fill="rgb(222,189,50)" fg:x="488" fg:w="1"/><text x="64.5451%" y="511.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.13%)</title><rect x="64.2951%" y="485" width="0.1318%" height="15" fill="rgb(245,148,34)" fg:x="488" fg:w="1"/><text x="64.5451%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (8 samples, 1.05%)</title><rect x="64.4269%" y="501" width="1.0540%" height="15" fill="rgb(222,29,6)" fg:x="489" fg:w="8"/><text x="64.6769%" y="511.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (8 samples, 1.05%)</title><rect x="64.4269%" y="485" width="1.0540%" height="15" fill="rgb(221,189,43)" fg:x="489" fg:w="8"/><text x="64.6769%" y="495.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (8 samples, 1.05%)</title><rect x="64.4269%" y="469" width="1.0540%" height="15" fill="rgb(207,36,27)" fg:x="489" fg:w="8"/><text x="64.6769%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (8 samples, 1.05%)</title><rect x="64.4269%" y="453" width="1.0540%" height="15" fill="rgb(217,90,24)" fg:x="489" fg:w="8"/><text x="64.6769%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (8 samples, 1.05%)</title><rect x="64.4269%" y="437" width="1.0540%" height="15" fill="rgb(224,66,35)" fg:x="489" fg:w="8"/><text x="64.6769%" y="447.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (8 samples, 1.05%)</title><rect x="64.4269%" y="421" width="1.0540%" height="15" fill="rgb(221,13,50)" fg:x="489" fg:w="8"/><text x="64.6769%" y="431.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (8 samples, 1.05%)</title><rect x="64.4269%" y="405" width="1.0540%" height="15" fill="rgb(236,68,49)" fg:x="489" fg:w="8"/><text x="64.6769%" y="415.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (8 samples, 1.05%)</title><rect x="64.4269%" y="389" width="1.0540%" height="15" fill="rgb(229,146,28)" fg:x="489" fg:w="8"/><text x="64.6769%" y="399.50"></text></g><g><title>[libc.so.6] (3 samples, 0.40%)</title><rect x="65.0856%" y="373" width="0.3953%" height="15" fill="rgb(225,31,38)" fg:x="494" fg:w="3"/><text x="65.3356%" y="383.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.13%)</title><rect x="65.4809%" y="501" width="0.1318%" height="15" fill="rgb(250,208,3)" fg:x="497" fg:w="1"/><text x="65.7309%" y="511.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (28 samples, 3.69%)</title><rect x="63.1094%" y="597" width="3.6891%" height="15" fill="rgb(246,54,23)" fg:x="479" fg:w="28"/><text x="63.3594%" y="607.50">std:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (28 samples, 3.69%)</title><rect x="63.1094%" y="581" width="3.6891%" height="15" fill="rgb(243,76,11)" fg:x="479" fg:w="28"/><text x="63.3594%" y="591.50">hash..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (28 samples, 3.69%)</title><rect x="63.1094%" y="565" width="3.6891%" height="15" fill="rgb(245,21,50)" fg:x="479" fg:w="28"/><text x="63.3594%" y="575.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (19 samples, 2.50%)</title><rect x="64.2951%" y="549" width="2.5033%" height="15" fill="rgb(228,9,43)" fg:x="488" fg:w="19"/><text x="64.5451%" y="559.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (19 samples, 2.50%)</title><rect x="64.2951%" y="533" width="2.5033%" height="15" fill="rgb(208,100,47)" fg:x="488" fg:w="19"/><text x="64.5451%" y="543.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (19 samples, 2.50%)</title><rect x="64.2951%" y="517" width="2.5033%" height="15" fill="rgb(232,26,8)" fg:x="488" fg:w="19"/><text x="64.5451%" y="527.50">ha..</text></g><g><title>hashbrown::raw::sse2::Group::load (9 samples, 1.19%)</title><rect x="65.6126%" y="501" width="1.1858%" height="15" fill="rgb(216,166,38)" fg:x="498" fg:w="9"/><text x="65.8626%" y="511.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (9 samples, 1.19%)</title><rect x="65.6126%" y="485" width="1.1858%" height="15" fill="rgb(251,202,51)" fg:x="498" fg:w="9"/><text x="65.8626%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 1.19%)</title><rect x="65.6126%" y="469" width="1.1858%" height="15" fill="rgb(254,216,34)" fg:x="498" fg:w="9"/><text x="65.8626%" y="479.50"></text></g><g><title>&lt;std::path::PathBuf as core::convert::From&lt;std::ffi::os_str::OsString&gt;&gt;::from (1 samples, 0.13%)</title><rect x="66.7984%" y="549" width="0.1318%" height="15" fill="rgb(251,32,27)" fg:x="507" fg:w="1"/><text x="67.0484%" y="559.50"></text></g><g><title>std::path::Path::to_path_buf (15 samples, 1.98%)</title><rect x="66.7984%" y="565" width="1.9763%" height="15" fill="rgb(208,127,28)" fg:x="507" fg:w="15"/><text x="67.0484%" y="575.50">s..</text></g><g><title>std::ffi::os_str::OsStr::to_os_string (14 samples, 1.84%)</title><rect x="66.9302%" y="549" width="1.8445%" height="15" fill="rgb(224,137,22)" fg:x="508" fg:w="14"/><text x="67.1802%" y="559.50">s..</text></g><g><title>std::sys::os_str::bytes::Slice::to_owned (14 samples, 1.84%)</title><rect x="66.9302%" y="533" width="1.8445%" height="15" fill="rgb(254,70,32)" fg:x="508" fg:w="14"/><text x="67.1802%" y="543.50">s..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (14 samples, 1.84%)</title><rect x="66.9302%" y="517" width="1.8445%" height="15" fill="rgb(229,75,37)" fg:x="508" fg:w="14"/><text x="67.1802%" y="527.50">a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (14 samples, 1.84%)</title><rect x="66.9302%" y="501" width="1.8445%" height="15" fill="rgb(252,64,23)" fg:x="508" fg:w="14"/><text x="67.1802%" y="511.50">a..</text></g><g><title>alloc::slice::hack::to_vec (14 samples, 1.84%)</title><rect x="66.9302%" y="485" width="1.8445%" height="15" fill="rgb(232,162,48)" fg:x="508" fg:w="14"/><text x="67.1802%" y="495.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (14 samples, 1.84%)</title><rect x="66.9302%" y="469" width="1.8445%" height="15" fill="rgb(246,160,12)" fg:x="508" fg:w="14"/><text x="67.1802%" y="479.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 1.84%)</title><rect x="66.9302%" y="453" width="1.8445%" height="15" fill="rgb(247,166,0)" fg:x="508" fg:w="14"/><text x="67.1802%" y="463.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14 samples, 1.84%)</title><rect x="66.9302%" y="437" width="1.8445%" height="15" fill="rgb(249,219,21)" fg:x="508" fg:w="14"/><text x="67.1802%" y="447.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (14 samples, 1.84%)</title><rect x="66.9302%" y="421" width="1.8445%" height="15" fill="rgb(205,209,3)" fg:x="508" fg:w="14"/><text x="67.1802%" y="431.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 1.71%)</title><rect x="67.0619%" y="405" width="1.7128%" height="15" fill="rgb(243,44,1)" fg:x="509" fg:w="13"/><text x="67.3119%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 1.71%)</title><rect x="67.0619%" y="389" width="1.7128%" height="15" fill="rgb(206,159,16)" fg:x="509" fg:w="13"/><text x="67.3119%" y="399.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 1.71%)</title><rect x="67.0619%" y="373" width="1.7128%" height="15" fill="rgb(244,77,30)" fg:x="509" fg:w="13"/><text x="67.3119%" y="383.50"></text></g><g><title>__rdl_alloc (13 samples, 1.71%)</title><rect x="67.0619%" y="357" width="1.7128%" height="15" fill="rgb(218,69,12)" fg:x="509" fg:w="13"/><text x="67.3119%" y="367.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (13 samples, 1.71%)</title><rect x="67.0619%" y="341" width="1.7128%" height="15" fill="rgb(212,87,7)" fg:x="509" fg:w="13"/><text x="67.3119%" y="351.50"></text></g><g><title>malloc (13 samples, 1.71%)</title><rect x="67.0619%" y="325" width="1.7128%" height="15" fill="rgb(245,114,25)" fg:x="509" fg:w="13"/><text x="67.3119%" y="335.50"></text></g><g><title>[libc.so.6] (12 samples, 1.58%)</title><rect x="67.1937%" y="309" width="1.5810%" height="15" fill="rgb(210,61,42)" fg:x="510" fg:w="12"/><text x="67.4437%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.26%)</title><rect x="68.7747%" y="533" width="0.2635%" height="15" fill="rgb(211,52,33)" fg:x="522" fg:w="2"/><text x="69.0247%" y="543.50"></text></g><g><title>std::path::PathBuf::_push::_{{closure}} (2 samples, 0.26%)</title><rect x="68.7747%" y="517" width="0.2635%" height="15" fill="rgb(234,58,33)" fg:x="522" fg:w="2"/><text x="69.0247%" y="527.50"></text></g><g><title>std::sys::path::unix::is_sep_byte (2 samples, 0.26%)</title><rect x="68.7747%" y="501" width="0.2635%" height="15" fill="rgb(220,115,36)" fg:x="522" fg:w="2"/><text x="69.0247%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.13%)</title><rect x="69.0382%" y="421" width="0.1318%" height="15" fill="rgb(243,153,54)" fg:x="524" fg:w="1"/><text x="69.2882%" y="431.50"></text></g><g><title>std::path::Path::join (23 samples, 3.03%)</title><rect x="66.7984%" y="597" width="3.0303%" height="15" fill="rgb(251,47,18)" fg:x="507" fg:w="23"/><text x="67.0484%" y="607.50">std..</text></g><g><title>std::path::Path::_join (23 samples, 3.03%)</title><rect x="66.7984%" y="581" width="3.0303%" height="15" fill="rgb(242,102,42)" fg:x="507" fg:w="23"/><text x="67.0484%" y="591.50">std..</text></g><g><title>std::path::PathBuf::push (8 samples, 1.05%)</title><rect x="68.7747%" y="565" width="1.0540%" height="15" fill="rgb(234,31,38)" fg:x="522" fg:w="8"/><text x="69.0247%" y="575.50"></text></g><g><title>std::path::PathBuf::_push (8 samples, 1.05%)</title><rect x="68.7747%" y="549" width="1.0540%" height="15" fill="rgb(221,117,51)" fg:x="522" fg:w="8"/><text x="69.0247%" y="559.50"></text></g><g><title>std::ffi::os_str::OsString::push (6 samples, 0.79%)</title><rect x="69.0382%" y="533" width="0.7905%" height="15" fill="rgb(212,20,18)" fg:x="524" fg:w="6"/><text x="69.2882%" y="543.50"></text></g><g><title>std::sys::os_str::bytes::Buf::push_slice (6 samples, 0.79%)</title><rect x="69.0382%" y="517" width="0.7905%" height="15" fill="rgb(245,133,36)" fg:x="524" fg:w="6"/><text x="69.2882%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (6 samples, 0.79%)</title><rect x="69.0382%" y="501" width="0.7905%" height="15" fill="rgb(212,6,19)" fg:x="524" fg:w="6"/><text x="69.2882%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (6 samples, 0.79%)</title><rect x="69.0382%" y="485" width="0.7905%" height="15" fill="rgb(218,1,36)" fg:x="524" fg:w="6"/><text x="69.2882%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (6 samples, 0.79%)</title><rect x="69.0382%" y="469" width="0.7905%" height="15" fill="rgb(246,84,54)" fg:x="524" fg:w="6"/><text x="69.2882%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (6 samples, 0.79%)</title><rect x="69.0382%" y="453" width="0.7905%" height="15" fill="rgb(242,110,6)" fg:x="524" fg:w="6"/><text x="69.2882%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.79%)</title><rect x="69.0382%" y="437" width="0.7905%" height="15" fill="rgb(214,47,5)" fg:x="524" fg:w="6"/><text x="69.2882%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.66%)</title><rect x="69.1700%" y="421" width="0.6588%" height="15" fill="rgb(218,159,25)" fg:x="525" fg:w="5"/><text x="69.4200%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.66%)</title><rect x="69.1700%" y="405" width="0.6588%" height="15" fill="rgb(215,211,28)" fg:x="525" fg:w="5"/><text x="69.4200%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.53%)</title><rect x="69.3017%" y="389" width="0.5270%" height="15" fill="rgb(238,59,32)" fg:x="526" fg:w="4"/><text x="69.5517%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4 samples, 0.53%)</title><rect x="69.3017%" y="373" width="0.5270%" height="15" fill="rgb(226,82,3)" fg:x="526" fg:w="4"/><text x="69.5517%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4 samples, 0.53%)</title><rect x="69.3017%" y="357" width="0.5270%" height="15" fill="rgb(240,164,32)" fg:x="526" fg:w="4"/><text x="69.5517%" y="367.50"></text></g><g><title>alloc::alloc::realloc (4 samples, 0.53%)</title><rect x="69.3017%" y="341" width="0.5270%" height="15" fill="rgb(232,46,7)" fg:x="526" fg:w="4"/><text x="69.5517%" y="351.50"></text></g><g><title>__rdl_realloc (4 samples, 0.53%)</title><rect x="69.3017%" y="325" width="0.5270%" height="15" fill="rgb(229,129,53)" fg:x="526" fg:w="4"/><text x="69.5517%" y="335.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (4 samples, 0.53%)</title><rect x="69.3017%" y="309" width="0.5270%" height="15" fill="rgb(234,188,29)" fg:x="526" fg:w="4"/><text x="69.5517%" y="319.50"></text></g><g><title>realloc (4 samples, 0.53%)</title><rect x="69.3017%" y="293" width="0.5270%" height="15" fill="rgb(246,141,4)" fg:x="526" fg:w="4"/><text x="69.5517%" y="303.50"></text></g><g><title>[libc.so.6] (3 samples, 0.40%)</title><rect x="69.4335%" y="277" width="0.3953%" height="15" fill="rgb(229,23,39)" fg:x="527" fg:w="3"/><text x="69.6835%" y="287.50"></text></g><g><title>[libc.so.6] (3 samples, 0.40%)</title><rect x="69.4335%" y="261" width="0.3953%" height="15" fill="rgb(206,12,3)" fg:x="527" fg:w="3"/><text x="69.6835%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.13%)</title><rect x="69.8287%" y="565" width="0.1318%" height="15" fill="rgb(252,226,20)" fg:x="530" fg:w="1"/><text x="70.0787%" y="575.50"></text></g><g><title>std::path::PathBuf::_push::_{{closure}} (1 samples, 0.13%)</title><rect x="69.8287%" y="549" width="0.1318%" height="15" fill="rgb(216,123,35)" fg:x="530" fg:w="1"/><text x="70.0787%" y="559.50"></text></g><g><title>std::sys::path::unix::is_sep_byte (1 samples, 0.13%)</title><rect x="69.8287%" y="533" width="0.1318%" height="15" fill="rgb(212,68,40)" fg:x="530" fg:w="1"/><text x="70.0787%" y="543.50"></text></g><g><title>shmr2::vfs::path::VirtualPath::resolve (67 samples, 8.83%)</title><rect x="61.7918%" y="613" width="8.8274%" height="15" fill="rgb(254,125,32)" fg:x="469" fg:w="67"/><text x="62.0418%" y="623.50">shmr2::vfs::..</text></g><g><title>std::path::PathBuf::push (6 samples, 0.79%)</title><rect x="69.8287%" y="597" width="0.7905%" height="15" fill="rgb(253,97,22)" fg:x="530" fg:w="6"/><text x="70.0787%" y="607.50"></text></g><g><title>std::path::PathBuf::_push (6 samples, 0.79%)</title><rect x="69.8287%" y="581" width="0.7905%" height="15" fill="rgb(241,101,14)" fg:x="530" fg:w="6"/><text x="70.0787%" y="591.50"></text></g><g><title>std::ffi::os_str::OsString::push (5 samples, 0.66%)</title><rect x="69.9605%" y="565" width="0.6588%" height="15" fill="rgb(238,103,29)" fg:x="531" fg:w="5"/><text x="70.2105%" y="575.50"></text></g><g><title>std::sys::os_str::bytes::Buf::push_slice (5 samples, 0.66%)</title><rect x="69.9605%" y="549" width="0.6588%" height="15" fill="rgb(233,195,47)" fg:x="531" fg:w="5"/><text x="70.2105%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (5 samples, 0.66%)</title><rect x="69.9605%" y="533" width="0.6588%" height="15" fill="rgb(246,218,30)" fg:x="531" fg:w="5"/><text x="70.2105%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 0.66%)</title><rect x="69.9605%" y="517" width="0.6588%" height="15" fill="rgb(219,145,47)" fg:x="531" fg:w="5"/><text x="70.2105%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (5 samples, 0.66%)</title><rect x="69.9605%" y="501" width="0.6588%" height="15" fill="rgb(243,12,26)" fg:x="531" fg:w="5"/><text x="70.2105%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (5 samples, 0.66%)</title><rect x="69.9605%" y="485" width="0.6588%" height="15" fill="rgb(214,87,16)" fg:x="531" fg:w="5"/><text x="70.2105%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.66%)</title><rect x="69.9605%" y="469" width="0.6588%" height="15" fill="rgb(208,99,42)" fg:x="531" fg:w="5"/><text x="70.2105%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.53%)</title><rect x="70.0922%" y="453" width="0.5270%" height="15" fill="rgb(253,99,2)" fg:x="532" fg:w="4"/><text x="70.3422%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.53%)</title><rect x="70.0922%" y="437" width="0.5270%" height="15" fill="rgb(220,168,23)" fg:x="532" fg:w="4"/><text x="70.3422%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.40%)</title><rect x="70.2240%" y="421" width="0.3953%" height="15" fill="rgb(242,38,24)" fg:x="533" fg:w="3"/><text x="70.4740%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.40%)</title><rect x="70.2240%" y="405" width="0.3953%" height="15" fill="rgb(225,182,9)" fg:x="533" fg:w="3"/><text x="70.4740%" y="415.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.40%)</title><rect x="70.2240%" y="389" width="0.3953%" height="15" fill="rgb(243,178,37)" fg:x="533" fg:w="3"/><text x="70.4740%" y="399.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.40%)</title><rect x="70.2240%" y="373" width="0.3953%" height="15" fill="rgb(232,139,19)" fg:x="533" fg:w="3"/><text x="70.4740%" y="383.50"></text></g><g><title>__rdl_realloc (3 samples, 0.40%)</title><rect x="70.2240%" y="357" width="0.3953%" height="15" fill="rgb(225,201,24)" fg:x="533" fg:w="3"/><text x="70.4740%" y="367.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3 samples, 0.40%)</title><rect x="70.2240%" y="341" width="0.3953%" height="15" fill="rgb(221,47,46)" fg:x="533" fg:w="3"/><text x="70.4740%" y="351.50"></text></g><g><title>realloc (2 samples, 0.26%)</title><rect x="70.3557%" y="325" width="0.2635%" height="15" fill="rgb(249,23,13)" fg:x="534" fg:w="2"/><text x="70.6057%" y="335.50"></text></g><g><title>&lt;&amp;T as core::convert::AsRef&lt;U&gt;&gt;::as_ref (1 samples, 0.13%)</title><rect x="70.6192%" y="597" width="0.1318%" height="15" fill="rgb(219,9,5)" fg:x="536" fg:w="1"/><text x="70.8692%" y="607.50"></text></g><g><title>std::sys::pal::unix::cvt (1 samples, 0.13%)</title><rect x="71.0145%" y="469" width="0.1318%" height="15" fill="rgb(254,171,16)" fg:x="539" fg:w="1"/><text x="71.2645%" y="479.50"></text></g><g><title>&lt;i32 as std::sys::pal::unix::IsMinusOne&gt;::is_minus_one (1 samples, 0.13%)</title><rect x="71.0145%" y="453" width="0.1318%" height="15" fill="rgb(230,171,20)" fg:x="539" fg:w="1"/><text x="71.2645%" y="463.50"></text></g><g><title>[libc.so.6] (3 samples, 0.40%)</title><rect x="71.9368%" y="437" width="0.3953%" height="15" fill="rgb(210,71,41)" fg:x="546" fg:w="3"/><text x="72.1868%" y="447.50"></text></g><g><title>std::sys::pal::unix::cvt_r (11 samples, 1.45%)</title><rect x="71.0145%" y="485" width="1.4493%" height="15" fill="rgb(206,173,20)" fg:x="539" fg:w="11"/><text x="71.2645%" y="495.50"></text></g><g><title>std::sys::pal::unix::fs::File::open_c::_{{closure}} (10 samples, 1.32%)</title><rect x="71.1462%" y="469" width="1.3175%" height="15" fill="rgb(233,88,34)" fg:x="540" fg:w="10"/><text x="71.3962%" y="479.50"></text></g><g><title>open64 (8 samples, 1.05%)</title><rect x="71.4097%" y="453" width="1.0540%" height="15" fill="rgb(223,209,46)" fg:x="542" fg:w="8"/><text x="71.6597%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="72.3320%" y="437" width="0.1318%" height="15" fill="rgb(250,43,18)" fg:x="549" fg:w="1"/><text x="72.5820%" y="447.50"></text></g><g><title>shmr2::vfs::block::VirtualBlock::open_handles (118 samples, 15.55%)</title><rect x="57.0487%" y="629" width="15.5468%" height="15" fill="rgb(208,13,10)" fg:x="433" fg:w="118"/><text x="57.2987%" y="639.50">shmr2::vfs::block::Virtu..</text></g><g><title>std::fs::OpenOptions::open (15 samples, 1.98%)</title><rect x="70.6192%" y="613" width="1.9763%" height="15" fill="rgb(212,200,36)" fg:x="536" fg:w="15"/><text x="70.8692%" y="623.50">s..</text></g><g><title>std::fs::OpenOptions::_open (14 samples, 1.84%)</title><rect x="70.7510%" y="597" width="1.8445%" height="15" fill="rgb(225,90,30)" fg:x="537" fg:w="14"/><text x="71.0010%" y="607.50">s..</text></g><g><title>std::sys::pal::unix::fs::File::open (14 samples, 1.84%)</title><rect x="70.7510%" y="581" width="1.8445%" height="15" fill="rgb(236,182,39)" fg:x="537" fg:w="14"/><text x="71.0010%" y="591.50">s..</text></g><g><title>std::sys::pal::common::small_c_string::run_path_with_cstr (14 samples, 1.84%)</title><rect x="70.7510%" y="565" width="1.8445%" height="15" fill="rgb(212,144,35)" fg:x="537" fg:w="14"/><text x="71.0010%" y="575.50">s..</text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr (14 samples, 1.84%)</title><rect x="70.7510%" y="549" width="1.8445%" height="15" fill="rgb(228,63,44)" fg:x="537" fg:w="14"/><text x="71.0010%" y="559.50">s..</text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr_stack (13 samples, 1.71%)</title><rect x="70.8827%" y="533" width="1.7128%" height="15" fill="rgb(228,109,6)" fg:x="538" fg:w="13"/><text x="71.1327%" y="543.50"></text></g><g><title>std::sys::pal::unix::fs::File::open::_{{closure}} (13 samples, 1.71%)</title><rect x="70.8827%" y="517" width="1.7128%" height="15" fill="rgb(238,117,24)" fg:x="538" fg:w="13"/><text x="71.1327%" y="527.50"></text></g><g><title>std::sys::pal::unix::fs::File::open_c (13 samples, 1.71%)</title><rect x="70.8827%" y="501" width="1.7128%" height="15" fill="rgb(242,26,26)" fg:x="538" fg:w="13"/><text x="71.1327%" y="511.50"></text></g><g><title>std::sys::pal::unix::fs::OpenOptions::get_creation_mode (1 samples, 0.13%)</title><rect x="72.4638%" y="485" width="0.1318%" height="15" fill="rgb(221,92,48)" fg:x="550" fg:w="1"/><text x="72.7138%" y="495.50"></text></g><g><title>std::sys::pal::unix::cvt (6 samples, 0.79%)</title><rect x="73.6495%" y="581" width="0.7905%" height="15" fill="rgb(209,209,32)" fg:x="559" fg:w="6"/><text x="73.8995%" y="591.50"></text></g><g><title>&lt;i32 as std::sys::pal::unix::IsMinusOne&gt;::is_minus_one (6 samples, 0.79%)</title><rect x="73.6495%" y="565" width="0.7905%" height="15" fill="rgb(221,70,22)" fg:x="559" fg:w="6"/><text x="73.8995%" y="575.50"></text></g><g><title>[libc.so.6] (19 samples, 2.50%)</title><rect x="76.1528%" y="533" width="2.5033%" height="15" fill="rgb(248,145,5)" fg:x="578" fg:w="19"/><text x="76.4028%" y="543.50">[l..</text></g><g><title>std::fs::File::sync_all (47 samples, 6.19%)</title><rect x="72.5955%" y="629" width="6.1924%" height="15" fill="rgb(226,116,26)" fg:x="551" fg:w="47"/><text x="72.8455%" y="639.50">std::fs:..</text></g><g><title>std::sys::pal::unix::fs::File::fsync (39 samples, 5.14%)</title><rect x="73.6495%" y="613" width="5.1383%" height="15" fill="rgb(244,5,17)" fg:x="559" fg:w="39"/><text x="73.8995%" y="623.50">std::s..</text></g><g><title>std::sys::pal::unix::cvt_r (39 samples, 5.14%)</title><rect x="73.6495%" y="597" width="5.1383%" height="15" fill="rgb(252,159,33)" fg:x="559" fg:w="39"/><text x="73.8995%" y="607.50">std::s..</text></g><g><title>std::sys::pal::unix::fs::File::fsync::_{{closure}} (33 samples, 4.35%)</title><rect x="74.4401%" y="581" width="4.3478%" height="15" fill="rgb(206,71,0)" fg:x="565" fg:w="33"/><text x="74.6901%" y="591.50">std::..</text></g><g><title>std::sys::pal::unix::fs::File::fsync::os_fsync (33 samples, 4.35%)</title><rect x="74.4401%" y="565" width="4.3478%" height="15" fill="rgb(233,118,54)" fg:x="565" fg:w="33"/><text x="74.6901%" y="575.50">std::..</text></g><g><title>fsync (30 samples, 3.95%)</title><rect x="74.8353%" y="549" width="3.9526%" height="15" fill="rgb(234,83,48)" fg:x="568" fg:w="30"/><text x="75.0853%" y="559.50">fsync</text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="78.6561%" y="533" width="0.1318%" height="15" fill="rgb(228,3,54)" fg:x="597" fg:w="1"/><text x="78.9061%" y="543.50"></text></g><g><title>std::os::unix::fs::FileExt::write_all_at (12 samples, 1.58%)</title><rect x="78.7879%" y="629" width="1.5810%" height="15" fill="rgb(226,155,13)" fg:x="598" fg:w="12"/><text x="79.0379%" y="639.50"></text></g><g><title>&lt;std::fs::File as std::os::unix::fs::FileExt&gt;::write_at (12 samples, 1.58%)</title><rect x="78.7879%" y="613" width="1.5810%" height="15" fill="rgb(241,28,37)" fg:x="598" fg:w="12"/><text x="79.0379%" y="623.50"></text></g><g><title>std::sys::pal::unix::fs::File::write_at (12 samples, 1.58%)</title><rect x="78.7879%" y="597" width="1.5810%" height="15" fill="rgb(233,93,10)" fg:x="598" fg:w="12"/><text x="79.0379%" y="607.50"></text></g><g><title>std::sys::pal::unix::fd::FileDesc::write_at (12 samples, 1.58%)</title><rect x="78.7879%" y="581" width="1.5810%" height="15" fill="rgb(225,113,19)" fg:x="598" fg:w="12"/><text x="79.0379%" y="591.50"></text></g><g><title>__libc_pwrite (12 samples, 1.58%)</title><rect x="78.7879%" y="565" width="1.5810%" height="15" fill="rgb(241,2,18)" fg:x="598" fg:w="12"/><text x="79.0379%" y="575.50"></text></g><g><title>[libc.so.6] (7 samples, 0.92%)</title><rect x="79.4466%" y="549" width="0.9223%" height="15" fill="rgb(228,207,21)" fg:x="603" fg:w="7"/><text x="79.6966%" y="559.50"></text></g><g><title>shmr2::fuse::&lt;impl fuser::Filesystem for shmr2::ShmrFs&gt;::flush (241 samples, 31.75%)</title><rect x="49.2754%" y="677" width="31.7523%" height="15" fill="rgb(213,211,35)" fg:x="374" fg:w="241"/><text x="49.5254%" y="687.50">shmr2::fuse::&lt;impl fuser::Filesystem for shmr2::Shm..</text></g><g><title>shmr2::vfs::VirtualFile::sync_data (241 samples, 31.75%)</title><rect x="49.2754%" y="661" width="31.7523%" height="15" fill="rgb(209,83,10)" fg:x="374" fg:w="241"/><text x="49.5254%" y="671.50">shmr2::vfs::VirtualFile::sync_data</text></g><g><title>shmr2::vfs::block::VirtualBlock::sync_data (238 samples, 31.36%)</title><rect x="49.6706%" y="645" width="31.3570%" height="15" fill="rgb(209,164,1)" fg:x="377" fg:w="238"/><text x="49.9206%" y="655.50">shmr2::vfs::block::VirtualBlock::sync_data</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (5 samples, 0.66%)</title><rect x="80.3689%" y="629" width="0.6588%" height="15" fill="rgb(213,184,43)" fg:x="610" fg:w="5"/><text x="80.6189%" y="639.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (5 samples, 0.66%)</title><rect x="80.3689%" y="613" width="0.6588%" height="15" fill="rgb(231,61,34)" fg:x="610" fg:w="5"/><text x="80.6189%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (5 samples, 0.66%)</title><rect x="80.3689%" y="597" width="0.6588%" height="15" fill="rgb(235,75,3)" fg:x="610" fg:w="5"/><text x="80.6189%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (5 samples, 0.66%)</title><rect x="80.3689%" y="581" width="0.6588%" height="15" fill="rgb(220,106,47)" fg:x="610" fg:w="5"/><text x="80.6189%" y="591.50"></text></g><g><title>shmr2::fuse::&lt;impl fuser::Filesystem for shmr2::ShmrFs&gt;::getattr (1 samples, 0.13%)</title><rect x="81.0277%" y="677" width="0.1318%" height="15" fill="rgb(210,196,33)" fg:x="615" fg:w="1"/><text x="81.2777%" y="687.50"></text></g><g><title>fuser::reply::ReplyAttr::attr (1 samples, 0.13%)</title><rect x="81.0277%" y="661" width="0.1318%" height="15" fill="rgb(229,154,42)" fg:x="615" fg:w="1"/><text x="81.2777%" y="671.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.13%)</title><rect x="81.0277%" y="645" width="0.1318%" height="15" fill="rgb(228,114,26)" fg:x="615" fg:w="1"/><text x="81.2777%" y="655.50"></text></g><g><title>&lt;fuser::ll::reply::Attr as core::convert::From&lt;&amp;fuser::FileAttr&gt;&gt;::from (1 samples, 0.13%)</title><rect x="81.0277%" y="629" width="0.1318%" height="15" fill="rgb(208,144,1)" fg:x="615" fg:w="1"/><text x="81.2777%" y="639.50"></text></g><g><title>fuser::ll::reply::fuse_attr_from_attr (1 samples, 0.13%)</title><rect x="81.0277%" y="613" width="0.1318%" height="15" fill="rgb(239,112,37)" fg:x="615" fg:w="1"/><text x="81.2777%" y="623.50"></text></g><g><title>fuser::ll::reply::time_from_system_time (1 samples, 0.13%)</title><rect x="81.0277%" y="597" width="0.1318%" height="15" fill="rgb(210,96,50)" fg:x="615" fg:w="1"/><text x="81.2777%" y="607.50"></text></g><g><title>shmr2::fuse::&lt;impl fuser::Filesystem for shmr2::ShmrFs&gt;::lookup (1 samples, 0.13%)</title><rect x="81.1594%" y="677" width="0.1318%" height="15" fill="rgb(222,178,2)" fg:x="616" fg:w="1"/><text x="81.4094%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::rwlock::ArcRwLockWriteGuard&lt;parking_lot::raw_rwlock::RawRwLock,shmr2::types::SuperblockEntry&gt;&gt; (1 samples, 0.13%)</title><rect x="81.2912%" y="661" width="0.1318%" height="15" fill="rgb(226,74,18)" fg:x="617" fg:w="1"/><text x="81.5412%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;lock_api::rwlock::RwLock&lt;parking_lot::raw_rwlock::RawRwLock,shmr2::types::SuperblockEntry&gt;&gt;&gt; (1 samples, 0.13%)</title><rect x="81.2912%" y="645" width="0.1318%" height="15" fill="rgb(225,67,54)" fg:x="617" fg:w="1"/><text x="81.5412%" y="655.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.13%)</title><rect x="81.2912%" y="629" width="0.1318%" height="15" fill="rgb(251,92,32)" fg:x="617" fg:w="1"/><text x="81.5412%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (1 samples, 0.13%)</title><rect x="81.2912%" y="613" width="0.1318%" height="15" fill="rgb(228,149,22)" fg:x="617" fg:w="1"/><text x="81.5412%" y="623.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.13%)</title><rect x="81.2912%" y="597" width="0.1318%" height="15" fill="rgb(243,54,13)" fg:x="617" fg:w="1"/><text x="81.5412%" y="607.50"></text></g><g><title>fuser::ll::reply::Response::new_write (1 samples, 0.13%)</title><rect x="81.4229%" y="645" width="0.1318%" height="15" fill="rgb(243,180,28)" fg:x="618" fg:w="1"/><text x="81.6729%" y="655.50"></text></g><g><title>fuser::ll::reply::Response::from_struct (1 samples, 0.13%)</title><rect x="81.4229%" y="629" width="0.1318%" height="15" fill="rgb(208,167,24)" fg:x="618" fg:w="1"/><text x="81.6729%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.13%)</title><rect x="81.4229%" y="613" width="0.1318%" height="15" fill="rgb(245,73,45)" fg:x="618" fg:w="1"/><text x="81.6729%" y="623.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::convert::From&lt;&amp;[&lt;A as smallvec::Array&gt;::Item]&gt;&gt;::from (1 samples, 0.13%)</title><rect x="81.4229%" y="597" width="0.1318%" height="15" fill="rgb(237,203,48)" fg:x="618" fg:w="1"/><text x="81.6729%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.13%)</title><rect x="81.4229%" y="581" width="0.1318%" height="15" fill="rgb(211,197,16)" fg:x="618" fg:w="1"/><text x="81.6729%" y="591.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::FromIterator&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::from_iter (1 samples, 0.13%)</title><rect x="81.4229%" y="565" width="0.1318%" height="15" fill="rgb(243,99,51)" fg:x="618" fg:w="1"/><text x="81.6729%" y="575.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::iter::traits::collect::Extend&lt;&lt;A as smallvec::Array&gt;::Item&gt;&gt;::extend (1 samples, 0.13%)</title><rect x="81.4229%" y="549" width="0.1318%" height="15" fill="rgb(215,123,29)" fg:x="618" fg:w="1"/><text x="81.6729%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.13%)</title><rect x="81.4229%" y="533" width="0.1318%" height="15" fill="rgb(239,186,37)" fg:x="618" fg:w="1"/><text x="81.6729%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.13%)</title><rect x="81.4229%" y="517" width="0.1318%" height="15" fill="rgb(252,136,39)" fg:x="618" fg:w="1"/><text x="81.6729%" y="527.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.13%)</title><rect x="81.5547%" y="597" width="0.1318%" height="15" fill="rgb(223,213,32)" fg:x="619" fg:w="1"/><text x="81.8047%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.13%)</title><rect x="81.5547%" y="581" width="0.1318%" height="15" fill="rgb(233,115,5)" fg:x="619" fg:w="1"/><text x="81.8047%" y="591.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.13%)</title><rect x="81.5547%" y="565" width="0.1318%" height="15" fill="rgb(207,226,44)" fg:x="619" fg:w="1"/><text x="81.8047%" y="575.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.13%)</title><rect x="81.5547%" y="549" width="0.1318%" height="15" fill="rgb(208,126,0)" fg:x="619" fg:w="1"/><text x="81.8047%" y="559.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.13%)</title><rect x="81.5547%" y="533" width="0.1318%" height="15" fill="rgb(244,66,21)" fg:x="619" fg:w="1"/><text x="81.8047%" y="543.50"></text></g><g><title>cfree (1 samples, 0.13%)</title><rect x="81.5547%" y="517" width="0.1318%" height="15" fill="rgb(222,97,12)" fg:x="619" fg:w="1"/><text x="81.8047%" y="527.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="81.5547%" y="501" width="0.1318%" height="15" fill="rgb(219,213,19)" fg:x="619" fg:w="1"/><text x="81.8047%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn fuser::reply::ReplySender&gt;&gt; (2 samples, 0.26%)</title><rect x="81.5547%" y="613" width="0.2635%" height="15" fill="rgb(252,169,30)" fg:x="619" fg:w="2"/><text x="81.8047%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;fuser::channel::ChannelSender&gt; (1 samples, 0.13%)</title><rect x="81.6864%" y="597" width="0.1318%" height="15" fill="rgb(206,32,51)" fg:x="620" fg:w="1"/><text x="81.9364%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::fs::File&gt;&gt; (1 samples, 0.13%)</title><rect x="81.6864%" y="581" width="0.1318%" height="15" fill="rgb(250,172,42)" fg:x="620" fg:w="1"/><text x="81.9364%" y="591.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.13%)</title><rect x="81.6864%" y="565" width="0.1318%" height="15" fill="rgb(209,34,43)" fg:x="620" fg:w="1"/><text x="81.9364%" y="575.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (1 samples, 0.13%)</title><rect x="81.6864%" y="549" width="0.1318%" height="15" fill="rgb(223,11,35)" fg:x="620" fg:w="1"/><text x="81.9364%" y="559.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (1 samples, 0.13%)</title><rect x="81.6864%" y="533" width="0.1318%" height="15" fill="rgb(251,219,26)" fg:x="620" fg:w="1"/><text x="81.9364%" y="543.50"></text></g><g><title>fuser::reply::ReplyWrite::written (6 samples, 0.79%)</title><rect x="81.4229%" y="661" width="0.7905%" height="15" fill="rgb(231,119,3)" fg:x="618" fg:w="6"/><text x="81.6729%" y="671.50"></text></g><g><title>fuser::reply::ReplyRaw::send_ll (5 samples, 0.66%)</title><rect x="81.5547%" y="645" width="0.6588%" height="15" fill="rgb(216,97,11)" fg:x="619" fg:w="5"/><text x="81.8047%" y="655.50"></text></g><g><title>fuser::reply::ReplyRaw::send_ll_mut (5 samples, 0.66%)</title><rect x="81.5547%" y="629" width="0.6588%" height="15" fill="rgb(223,59,9)" fg:x="619" fg:w="5"/><text x="81.8047%" y="639.50"></text></g><g><title>fuser::ll::reply::Response::with_iovec (3 samples, 0.40%)</title><rect x="81.8182%" y="613" width="0.3953%" height="15" fill="rgb(233,93,31)" fg:x="621" fg:w="3"/><text x="82.0682%" y="623.50"></text></g><g><title>fuser::reply::ReplyRaw::send_ll_mut::_{{closure}} (3 samples, 0.40%)</title><rect x="81.8182%" y="597" width="0.3953%" height="15" fill="rgb(239,81,33)" fg:x="621" fg:w="3"/><text x="82.0682%" y="607.50"></text></g><g><title>&lt;fuser::channel::ChannelSender as fuser::reply::ReplySender&gt;::send (3 samples, 0.40%)</title><rect x="81.8182%" y="581" width="0.3953%" height="15" fill="rgb(213,120,34)" fg:x="621" fg:w="3"/><text x="82.0682%" y="591.50"></text></g><g><title>writev (3 samples, 0.40%)</title><rect x="81.8182%" y="565" width="0.3953%" height="15" fill="rgb(243,49,53)" fg:x="621" fg:w="3"/><text x="82.0682%" y="575.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="82.0817%" y="549" width="0.1318%" height="15" fill="rgb(247,216,33)" fg:x="623" fg:w="1"/><text x="82.3317%" y="559.50"></text></g><g><title>shmr2::types::Inode::update_metadata (2 samples, 0.26%)</title><rect x="82.2134%" y="661" width="0.2635%" height="15" fill="rgb(226,26,14)" fg:x="624" fg:w="2"/><text x="82.4634%" y="671.50"></text></g><g><title>shmr2::fuse::time_now (2 samples, 0.26%)</title><rect x="82.2134%" y="645" width="0.2635%" height="15" fill="rgb(215,49,53)" fg:x="624" fg:w="2"/><text x="82.4634%" y="655.50"></text></g><g><title>std::time::SystemTime::now (2 samples, 0.26%)</title><rect x="82.2134%" y="629" width="0.2635%" height="15" fill="rgb(245,162,40)" fg:x="624" fg:w="2"/><text x="82.4634%" y="639.50"></text></g><g><title>std::sys::pal::unix::time::SystemTime::now (2 samples, 0.26%)</title><rect x="82.2134%" y="613" width="0.2635%" height="15" fill="rgb(229,68,17)" fg:x="624" fg:w="2"/><text x="82.4634%" y="623.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (2 samples, 0.26%)</title><rect x="82.2134%" y="597" width="0.2635%" height="15" fill="rgb(213,182,10)" fg:x="624" fg:w="2"/><text x="82.4634%" y="607.50"></text></g><g><title>clock_gettime (2 samples, 0.26%)</title><rect x="82.2134%" y="581" width="0.2635%" height="15" fill="rgb(245,125,30)" fg:x="624" fg:w="2"/><text x="82.4634%" y="591.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.13%)</title><rect x="82.3452%" y="565" width="0.1318%" height="15" fill="rgb(232,202,2)" fg:x="625" fg:w="1"/><text x="82.5952%" y="575.50"></text></g><g><title>&lt;shmr2::config::ShmrFsConfig as core::clone::Clone&gt;::clone (1 samples, 0.13%)</title><rect x="82.6087%" y="597" width="0.1318%" height="15" fill="rgb(237,140,51)" fg:x="627" fg:w="1"/><text x="82.8587%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1 samples, 0.13%)</title><rect x="82.6087%" y="581" width="0.1318%" height="15" fill="rgb(236,157,25)" fg:x="627" fg:w="1"/><text x="82.8587%" y="591.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.13%)</title><rect x="82.6087%" y="565" width="0.1318%" height="15" fill="rgb(219,209,0)" fg:x="627" fg:w="1"/><text x="82.8587%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.13%)</title><rect x="82.6087%" y="549" width="0.1318%" height="15" fill="rgb(240,116,54)" fg:x="627" fg:w="1"/><text x="82.8587%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (1 samples, 0.13%)</title><rect x="82.6087%" y="533" width="0.1318%" height="15" fill="rgb(216,10,36)" fg:x="627" fg:w="1"/><text x="82.8587%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (1 samples, 0.13%)</title><rect x="82.6087%" y="517" width="0.1318%" height="15" fill="rgb(222,72,44)" fg:x="627" fg:w="1"/><text x="82.8587%" y="527.50"></text></g><g><title>core::clone::Clone::clone (1 samples, 0.13%)</title><rect x="82.6087%" y="501" width="0.1318%" height="15" fill="rgb(232,159,9)" fg:x="627" fg:w="1"/><text x="82.8587%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1 samples, 0.13%)</title><rect x="82.6087%" y="485" width="0.1318%" height="15" fill="rgb(210,39,32)" fg:x="627" fg:w="1"/><text x="82.8587%" y="495.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.13%)</title><rect x="82.6087%" y="469" width="0.1318%" height="15" fill="rgb(216,194,45)" fg:x="627" fg:w="1"/><text x="82.8587%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.13%)</title><rect x="82.6087%" y="453" width="0.1318%" height="15" fill="rgb(218,18,35)" fg:x="627" fg:w="1"/><text x="82.8587%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (1 samples, 0.13%)</title><rect x="82.6087%" y="437" width="0.1318%" height="15" fill="rgb(207,83,51)" fg:x="627" fg:w="1"/><text x="82.8587%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (1 samples, 0.13%)</title><rect x="82.6087%" y="421" width="0.1318%" height="15" fill="rgb(225,63,43)" fg:x="627" fg:w="1"/><text x="82.8587%" y="431.50"></text></g><g><title>core::clone::Clone::clone (1 samples, 0.13%)</title><rect x="82.6087%" y="405" width="0.1318%" height="15" fill="rgb(207,57,36)" fg:x="627" fg:w="1"/><text x="82.8587%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.13%)</title><rect x="82.6087%" y="389" width="0.1318%" height="15" fill="rgb(216,99,33)" fg:x="627" fg:w="1"/><text x="82.8587%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.13%)</title><rect x="82.6087%" y="373" width="0.1318%" height="15" fill="rgb(225,42,16)" fg:x="627" fg:w="1"/><text x="82.8587%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.13%)</title><rect x="82.6087%" y="357" width="0.1318%" height="15" fill="rgb(220,201,45)" fg:x="627" fg:w="1"/><text x="82.8587%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.13%)</title><rect x="82.6087%" y="341" width="0.1318%" height="15" fill="rgb(225,33,4)" fg:x="627" fg:w="1"/><text x="82.8587%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.13%)</title><rect x="82.6087%" y="325" width="0.1318%" height="15" fill="rgb(224,33,50)" fg:x="627" fg:w="1"/><text x="82.8587%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.13%)</title><rect x="82.6087%" y="309" width="0.1318%" height="15" fill="rgb(246,198,51)" fg:x="627" fg:w="1"/><text x="82.8587%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.13%)</title><rect x="82.6087%" y="293" width="0.1318%" height="15" fill="rgb(205,22,4)" fg:x="627" fg:w="1"/><text x="82.8587%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1 samples, 0.13%)</title><rect x="82.6087%" y="277" width="0.1318%" height="15" fill="rgb(206,3,8)" fg:x="627" fg:w="1"/><text x="82.8587%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.13%)</title><rect x="82.6087%" y="261" width="0.1318%" height="15" fill="rgb(251,23,15)" fg:x="627" fg:w="1"/><text x="82.8587%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.13%)</title><rect x="82.6087%" y="245" width="0.1318%" height="15" fill="rgb(252,88,28)" fg:x="627" fg:w="1"/><text x="82.8587%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.13%)</title><rect x="82.6087%" y="229" width="0.1318%" height="15" fill="rgb(212,127,14)" fg:x="627" fg:w="1"/><text x="82.8587%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.13%)</title><rect x="82.6087%" y="213" width="0.1318%" height="15" fill="rgb(247,145,37)" fg:x="627" fg:w="1"/><text x="82.8587%" y="223.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.13%)</title><rect x="82.6087%" y="197" width="0.1318%" height="15" fill="rgb(209,117,53)" fg:x="627" fg:w="1"/><text x="82.8587%" y="207.50"></text></g><g><title>malloc (1 samples, 0.13%)</title><rect x="82.6087%" y="181" width="0.1318%" height="15" fill="rgb(212,90,42)" fg:x="627" fg:w="1"/><text x="82.8587%" y="191.50"></text></g><g><title>shmr2::config::ShmrFsConfig::select_buckets (1 samples, 0.13%)</title><rect x="82.7404%" y="597" width="0.1318%" height="15" fill="rgb(218,164,37)" fg:x="628" fg:w="1"/><text x="82.9904%" y="607.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.13%)</title><rect x="82.7404%" y="581" width="0.1318%" height="15" fill="rgb(246,65,34)" fg:x="628" fg:w="1"/><text x="82.9904%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.13%)</title><rect x="82.7404%" y="565" width="0.1318%" height="15" fill="rgb(231,100,33)" fg:x="628" fg:w="1"/><text x="82.9904%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.13%)</title><rect x="82.7404%" y="549" width="0.1318%" height="15" fill="rgb(228,126,14)" fg:x="628" fg:w="1"/><text x="82.9904%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.13%)</title><rect x="82.7404%" y="533" width="0.1318%" height="15" fill="rgb(215,173,21)" fg:x="628" fg:w="1"/><text x="82.9904%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.13%)</title><rect x="82.7404%" y="517" width="0.1318%" height="15" fill="rgb(210,6,40)" fg:x="628" fg:w="1"/><text x="82.9904%" y="527.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.13%)</title><rect x="82.7404%" y="501" width="0.1318%" height="15" fill="rgb(212,48,18)" fg:x="628" fg:w="1"/><text x="82.9904%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1 samples, 0.13%)</title><rect x="82.7404%" y="485" width="0.1318%" height="15" fill="rgb(230,214,11)" fg:x="628" fg:w="1"/><text x="82.9904%" y="495.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (1 samples, 0.13%)</title><rect x="82.7404%" y="469" width="0.1318%" height="15" fill="rgb(254,105,39)" fg:x="628" fg:w="1"/><text x="82.9904%" y="479.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.13%)</title><rect x="82.7404%" y="453" width="0.1318%" height="15" fill="rgb(245,158,5)" fg:x="628" fg:w="1"/><text x="82.9904%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.13%)</title><rect x="82.7404%" y="437" width="0.1318%" height="15" fill="rgb(249,208,11)" fg:x="628" fg:w="1"/><text x="82.9904%" y="447.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.13%)</title><rect x="82.7404%" y="421" width="0.1318%" height="15" fill="rgb(210,39,28)" fg:x="628" fg:w="1"/><text x="82.9904%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.13%)</title><rect x="82.7404%" y="405" width="0.1318%" height="15" fill="rgb(211,56,53)" fg:x="628" fg:w="1"/><text x="82.9904%" y="415.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (1 samples, 0.13%)</title><rect x="82.7404%" y="389" width="0.1318%" height="15" fill="rgb(226,201,30)" fg:x="628" fg:w="1"/><text x="82.9904%" y="399.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.13%)</title><rect x="82.7404%" y="373" width="0.1318%" height="15" fill="rgb(239,101,34)" fg:x="628" fg:w="1"/><text x="82.9904%" y="383.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="82.7404%" y="357" width="0.1318%" height="15" fill="rgb(226,209,5)" fg:x="628" fg:w="1"/><text x="82.9904%" y="367.50"></text></g><g><title>shmr2::vfs::path::VirtualPath::resolve (1 samples, 0.13%)</title><rect x="82.8722%" y="581" width="0.1318%" height="15" fill="rgb(250,105,47)" fg:x="629" fg:w="1"/><text x="83.1222%" y="591.50"></text></g><g><title>std::path::PathBuf::push (1 samples, 0.13%)</title><rect x="82.8722%" y="565" width="0.1318%" height="15" fill="rgb(230,72,3)" fg:x="629" fg:w="1"/><text x="83.1222%" y="575.50"></text></g><g><title>std::path::PathBuf::_push (1 samples, 0.13%)</title><rect x="82.8722%" y="549" width="0.1318%" height="15" fill="rgb(232,218,39)" fg:x="629" fg:w="1"/><text x="83.1222%" y="559.50"></text></g><g><title>std::ffi::os_str::OsString::push (1 samples, 0.13%)</title><rect x="82.8722%" y="533" width="0.1318%" height="15" fill="rgb(248,166,6)" fg:x="629" fg:w="1"/><text x="83.1222%" y="543.50"></text></g><g><title>std::sys::os_str::bytes::Buf::push_slice (1 samples, 0.13%)</title><rect x="82.8722%" y="517" width="0.1318%" height="15" fill="rgb(247,89,20)" fg:x="629" fg:w="1"/><text x="83.1222%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.13%)</title><rect x="82.8722%" y="501" width="0.1318%" height="15" fill="rgb(248,130,54)" fg:x="629" fg:w="1"/><text x="83.1222%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.13%)</title><rect x="82.8722%" y="485" width="0.1318%" height="15" fill="rgb(234,196,4)" fg:x="629" fg:w="1"/><text x="83.1222%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.13%)</title><rect x="82.8722%" y="469" width="0.1318%" height="15" fill="rgb(250,143,31)" fg:x="629" fg:w="1"/><text x="83.1222%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.13%)</title><rect x="82.8722%" y="453" width="0.1318%" height="15" fill="rgb(211,110,34)" fg:x="629" fg:w="1"/><text x="83.1222%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.13%)</title><rect x="82.8722%" y="437" width="0.1318%" height="15" fill="rgb(215,124,48)" fg:x="629" fg:w="1"/><text x="83.1222%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.13%)</title><rect x="82.8722%" y="421" width="0.1318%" height="15" fill="rgb(216,46,13)" fg:x="629" fg:w="1"/><text x="83.1222%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.13%)</title><rect x="82.8722%" y="405" width="0.1318%" height="15" fill="rgb(205,184,25)" fg:x="629" fg:w="1"/><text x="83.1222%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.13%)</title><rect x="82.8722%" y="389" width="0.1318%" height="15" fill="rgb(228,1,10)" fg:x="629" fg:w="1"/><text x="83.1222%" y="399.50"></text></g><g><title>shmr2::vfs::VirtualFile::allocate_block (4 samples, 0.53%)</title><rect x="82.6087%" y="645" width="0.5270%" height="15" fill="rgb(213,116,27)" fg:x="627" fg:w="4"/><text x="82.8587%" y="655.50"></text></g><g><title>shmr2::vfs::block::VirtualBlock::create (4 samples, 0.53%)</title><rect x="82.6087%" y="629" width="0.5270%" height="15" fill="rgb(241,95,50)" fg:x="627" fg:w="4"/><text x="82.8587%" y="639.50"></text></g><g><title>shmr2::vfs::block::VirtualBlock::create_with_pool (4 samples, 0.53%)</title><rect x="82.6087%" y="613" width="0.5270%" height="15" fill="rgb(238,48,32)" fg:x="627" fg:w="4"/><text x="82.8587%" y="623.50"></text></g><g><title>shmr2::vfs::path::VirtualPath::create (2 samples, 0.26%)</title><rect x="82.8722%" y="597" width="0.2635%" height="15" fill="rgb(235,113,49)" fg:x="629" fg:w="2"/><text x="83.1222%" y="607.50"></text></g><g><title>std::path::Path::exists (1 samples, 0.13%)</title><rect x="83.0040%" y="581" width="0.1318%" height="15" fill="rgb(205,127,43)" fg:x="630" fg:w="1"/><text x="83.2540%" y="591.50"></text></g><g><title>std::fs::metadata (1 samples, 0.13%)</title><rect x="83.0040%" y="565" width="0.1318%" height="15" fill="rgb(250,162,2)" fg:x="630" fg:w="1"/><text x="83.2540%" y="575.50"></text></g><g><title>std::sys::pal::unix::fs::stat (1 samples, 0.13%)</title><rect x="83.0040%" y="549" width="0.1318%" height="15" fill="rgb(220,13,41)" fg:x="630" fg:w="1"/><text x="83.2540%" y="559.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_path_with_cstr (1 samples, 0.13%)</title><rect x="83.0040%" y="533" width="0.1318%" height="15" fill="rgb(249,221,25)" fg:x="630" fg:w="1"/><text x="83.2540%" y="543.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr (1 samples, 0.13%)</title><rect x="83.0040%" y="517" width="0.1318%" height="15" fill="rgb(215,208,19)" fg:x="630" fg:w="1"/><text x="83.2540%" y="527.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr_stack (1 samples, 0.13%)</title><rect x="83.0040%" y="501" width="0.1318%" height="15" fill="rgb(236,175,2)" fg:x="630" fg:w="1"/><text x="83.2540%" y="511.50"></text></g><g><title>std::sys::pal::unix::fs::stat::_{{closure}} (1 samples, 0.13%)</title><rect x="83.0040%" y="485" width="0.1318%" height="15" fill="rgb(241,52,2)" fg:x="630" fg:w="1"/><text x="83.2540%" y="495.50"></text></g><g><title>std::sys::pal::unix::fs::try_statx (1 samples, 0.13%)</title><rect x="83.0040%" y="469" width="0.1318%" height="15" fill="rgb(248,140,14)" fg:x="630" fg:w="1"/><text x="83.2540%" y="479.50"></text></g><g><title>[libc.so.6] (4 samples, 0.53%)</title><rect x="83.2675%" y="421" width="0.5270%" height="15" fill="rgb(253,22,42)" fg:x="632" fg:w="4"/><text x="83.5175%" y="431.50"></text></g><g><title>[libc.so.6] (3 samples, 0.40%)</title><rect x="83.3992%" y="405" width="0.3953%" height="15" fill="rgb(234,61,47)" fg:x="633" fg:w="3"/><text x="83.6492%" y="415.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="83.6627%" y="389" width="0.1318%" height="15" fill="rgb(208,226,15)" fg:x="635" fg:w="1"/><text x="83.9127%" y="399.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="83.6627%" y="373" width="0.1318%" height="15" fill="rgb(217,221,4)" fg:x="635" fg:w="1"/><text x="83.9127%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (6 samples, 0.79%)</title><rect x="83.1357%" y="597" width="0.7905%" height="15" fill="rgb(212,174,34)" fg:x="631" fg:w="6"/><text x="83.3857%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.79%)</title><rect x="83.1357%" y="581" width="0.7905%" height="15" fill="rgb(253,83,4)" fg:x="631" fg:w="6"/><text x="83.3857%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.79%)</title><rect x="83.1357%" y="565" width="0.7905%" height="15" fill="rgb(250,195,49)" fg:x="631" fg:w="6"/><text x="83.3857%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (6 samples, 0.79%)</title><rect x="83.1357%" y="549" width="0.7905%" height="15" fill="rgb(241,192,25)" fg:x="631" fg:w="6"/><text x="83.3857%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.79%)</title><rect x="83.1357%" y="533" width="0.7905%" height="15" fill="rgb(208,124,10)" fg:x="631" fg:w="6"/><text x="83.3857%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (6 samples, 0.79%)</title><rect x="83.1357%" y="517" width="0.7905%" height="15" fill="rgb(222,33,0)" fg:x="631" fg:w="6"/><text x="83.3857%" y="527.50"></text></g><g><title>alloc::alloc::Global::grow_impl (6 samples, 0.79%)</title><rect x="83.1357%" y="501" width="0.7905%" height="15" fill="rgb(234,209,28)" fg:x="631" fg:w="6"/><text x="83.3857%" y="511.50"></text></g><g><title>alloc::alloc::realloc (6 samples, 0.79%)</title><rect x="83.1357%" y="485" width="0.7905%" height="15" fill="rgb(224,11,23)" fg:x="631" fg:w="6"/><text x="83.3857%" y="495.50"></text></g><g><title>__rdl_realloc (6 samples, 0.79%)</title><rect x="83.1357%" y="469" width="0.7905%" height="15" fill="rgb(232,99,1)" fg:x="631" fg:w="6"/><text x="83.3857%" y="479.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (6 samples, 0.79%)</title><rect x="83.1357%" y="453" width="0.7905%" height="15" fill="rgb(237,95,45)" fg:x="631" fg:w="6"/><text x="83.3857%" y="463.50"></text></g><g><title>realloc (6 samples, 0.79%)</title><rect x="83.1357%" y="437" width="0.7905%" height="15" fill="rgb(208,109,11)" fg:x="631" fg:w="6"/><text x="83.3857%" y="447.50"></text></g><g><title>mremap (1 samples, 0.13%)</title><rect x="83.7945%" y="421" width="0.1318%" height="15" fill="rgb(216,190,48)" fg:x="636" fg:w="1"/><text x="84.0445%" y="431.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.13%)</title><rect x="83.9262%" y="597" width="0.1318%" height="15" fill="rgb(251,171,36)" fg:x="637" fg:w="1"/><text x="84.1762%" y="607.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.13%)</title><rect x="83.9262%" y="581" width="0.1318%" height="15" fill="rgb(230,62,22)" fg:x="637" fg:w="1"/><text x="84.1762%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (29 samples, 3.82%)</title><rect x="83.1357%" y="629" width="3.8208%" height="15" fill="rgb(225,114,35)" fg:x="631" fg:w="29"/><text x="83.3857%" y="639.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (29 samples, 3.82%)</title><rect x="83.1357%" y="613" width="3.8208%" height="15" fill="rgb(215,118,42)" fg:x="631" fg:w="29"/><text x="83.3857%" y="623.50">allo..</text></g><g><title>core::ptr::write (22 samples, 2.90%)</title><rect x="84.0580%" y="597" width="2.8986%" height="15" fill="rgb(243,119,21)" fg:x="638" fg:w="22"/><text x="84.3080%" y="607.50">co..</text></g><g><title>[libc.so.6] (22 samples, 2.90%)</title><rect x="84.0580%" y="581" width="2.8986%" height="15" fill="rgb(252,177,53)" fg:x="638" fg:w="22"/><text x="84.3080%" y="591.50">[l..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (5 samples, 0.66%)</title><rect x="86.9565%" y="629" width="0.6588%" height="15" fill="rgb(237,209,29)" fg:x="660" fg:w="5"/><text x="87.2065%" y="639.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.66%)</title><rect x="86.9565%" y="613" width="0.6588%" height="15" fill="rgb(212,65,23)" fg:x="660" fg:w="5"/><text x="87.2065%" y="623.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::unlock (5 samples, 0.66%)</title><rect x="86.9565%" y="597" width="0.6588%" height="15" fill="rgb(230,222,46)" fg:x="660" fg:w="5"/><text x="87.2065%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (5 samples, 0.66%)</title><rect x="86.9565%" y="581" width="0.6588%" height="15" fill="rgb(215,135,32)" fg:x="660" fg:w="5"/><text x="87.2065%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_swap (5 samples, 0.66%)</title><rect x="86.9565%" y="565" width="0.6588%" height="15" fill="rgb(246,101,22)" fg:x="660" fg:w="5"/><text x="87.2065%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (49 samples, 6.46%)</title><rect x="87.6153%" y="629" width="6.4559%" height="15" fill="rgb(206,107,13)" fg:x="665" fg:w="49"/><text x="87.8653%" y="639.50">core::sl..</text></g><g><title>core::intrinsics::copy_nonoverlapping (49 samples, 6.46%)</title><rect x="87.6153%" y="613" width="6.4559%" height="15" fill="rgb(250,100,44)" fg:x="665" fg:w="49"/><text x="87.8653%" y="623.50">core::in..</text></g><g><title>[libc.so.6] (49 samples, 6.46%)</title><rect x="87.6153%" y="597" width="6.4559%" height="15" fill="rgb(231,147,38)" fg:x="665" fg:w="49"/><text x="87.8653%" y="607.50">[libc.so..</text></g><g><title>fuser::request::Request::dispatch_req (346 samples, 45.59%)</title><rect x="48.7484%" y="693" width="45.5863%" height="15" fill="rgb(229,8,40)" fg:x="370" fg:w="346"/><text x="48.9984%" y="703.50">fuser::request::Request::dispatch_req</text></g><g><title>shmr2::fuse::&lt;impl fuser::Filesystem for shmr2::ShmrFs&gt;::write (99 samples, 13.04%)</title><rect x="81.2912%" y="677" width="13.0435%" height="15" fill="rgb(221,135,30)" fg:x="617" fg:w="99"/><text x="81.5412%" y="687.50">shmr2::fuse::&lt;impl f..</text></g><g><title>shmr2::vfs::VirtualFile::write (90 samples, 11.86%)</title><rect x="82.4769%" y="661" width="11.8577%" height="15" fill="rgb(249,193,18)" fg:x="626" fg:w="90"/><text x="82.7269%" y="671.50">shmr2::vfs::Virtua..</text></g><g><title>shmr2::vfs::block::VirtualBlock::write (85 samples, 11.20%)</title><rect x="83.1357%" y="645" width="11.1989%" height="15" fill="rgb(209,133,39)" fg:x="631" fg:w="85"/><text x="83.3857%" y="655.50">shmr2::vfs::bloc..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (2 samples, 0.26%)</title><rect x="94.0711%" y="629" width="0.2635%" height="15" fill="rgb(232,100,14)" fg:x="714" fg:w="2"/><text x="94.3211%" y="639.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock (2 samples, 0.26%)</title><rect x="94.0711%" y="613" width="0.2635%" height="15" fill="rgb(224,185,1)" fg:x="714" fg:w="2"/><text x="94.3211%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (2 samples, 0.26%)</title><rect x="94.0711%" y="597" width="0.2635%" height="15" fill="rgb(223,139,8)" fg:x="714" fg:w="2"/><text x="94.3211%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2 samples, 0.26%)</title><rect x="94.0711%" y="581" width="0.2635%" height="15" fill="rgb(232,213,38)" fg:x="714" fg:w="2"/><text x="94.3211%" y="591.50"></text></g><g><title>fuser::request::Request::dispatch (347 samples, 45.72%)</title><rect x="48.7484%" y="709" width="45.7181%" height="15" fill="rgb(207,94,22)" fg:x="370" fg:w="347"/><text x="48.9984%" y="719.50">fuser::request::Request::dispatch</text></g><g><title>log::max_level (1 samples, 0.13%)</title><rect x="94.3347%" y="693" width="0.1318%" height="15" fill="rgb(219,183,54)" fg:x="716" fg:w="1"/><text x="94.5847%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.13%)</title><rect x="94.3347%" y="677" width="0.1318%" height="15" fill="rgb(216,185,54)" fg:x="716" fg:w="1"/><text x="94.5847%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.13%)</title><rect x="94.3347%" y="661" width="0.1318%" height="15" fill="rgb(254,217,39)" fg:x="716" fg:w="1"/><text x="94.5847%" y="671.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (363 samples, 47.83%)</title><rect x="46.7721%" y="757" width="47.8261%" height="15" fill="rgb(240,178,23)" fg:x="355" fg:w="363"/><text x="47.0221%" y="767.50">core::result::Result&lt;T,E&gt;::and_then</text></g><g><title>fuser::mount2::_{{closure}} (363 samples, 47.83%)</title><rect x="46.7721%" y="741" width="47.8261%" height="15" fill="rgb(218,11,47)" fg:x="355" fg:w="363"/><text x="47.0221%" y="751.50">fuser::mount2::_{{closure}}</text></g><g><title>fuser::session::Session&lt;FS&gt;::run (361 samples, 47.56%)</title><rect x="47.0356%" y="725" width="47.5626%" height="15" fill="rgb(218,51,51)" fg:x="357" fg:w="361"/><text x="47.2856%" y="735.50">fuser::session::Session&lt;FS&gt;::run</text></g><g><title>fuser::request::Request::new (1 samples, 0.13%)</title><rect x="94.4664%" y="709" width="0.1318%" height="15" fill="rgb(238,126,27)" fg:x="717" fg:w="1"/><text x="94.7164%" y="719.50"></text></g><g><title>&lt;fuser::ll::request::AnyRequest as core::convert::TryFrom&lt;&amp;[u8]&gt;&gt;::try_from (1 samples, 0.13%)</title><rect x="94.4664%" y="693" width="0.1318%" height="15" fill="rgb(249,202,22)" fg:x="717" fg:w="1"/><text x="94.7164%" y="703.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.13%)</title><rect x="94.5982%" y="741" width="0.1318%" height="15" fill="rgb(254,195,49)" fg:x="718" fg:w="1"/><text x="94.8482%" y="751.50"></text></g><g><title>[libfuse3.so.3.16.2] (1 samples, 0.13%)</title><rect x="95.2569%" y="645" width="0.1318%" height="15" fill="rgb(208,123,14)" fg:x="723" fg:w="1"/><text x="95.5069%" y="655.50"></text></g><g><title>execv (1 samples, 0.13%)</title><rect x="95.2569%" y="629" width="0.1318%" height="15" fill="rgb(224,200,8)" fg:x="723" fg:w="1"/><text x="95.5069%" y="639.50"></text></g><g><title>__close (1 samples, 0.13%)</title><rect x="95.3887%" y="645" width="0.1318%" height="15" fill="rgb(217,61,36)" fg:x="724" fg:w="1"/><text x="95.6387%" y="655.50"></text></g><g><title>__libc_fork (6 samples, 0.79%)</title><rect x="95.5204%" y="645" width="0.7905%" height="15" fill="rgb(206,35,45)" fg:x="725" fg:w="6"/><text x="95.7704%" y="655.50"></text></g><g><title>_Fork (3 samples, 0.40%)</title><rect x="95.9157%" y="629" width="0.3953%" height="15" fill="rgb(217,65,33)" fg:x="728" fg:w="3"/><text x="96.1657%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.13%)</title><rect x="96.1792%" y="613" width="0.1318%" height="15" fill="rgb(222,158,48)" fg:x="730" fg:w="1"/><text x="96.4292%" y="623.50"></text></g><g><title>__snprintf_chk (1 samples, 0.13%)</title><rect x="96.3109%" y="645" width="0.1318%" height="15" fill="rgb(254,2,54)" fg:x="731" fg:w="1"/><text x="96.5609%" y="655.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="96.3109%" y="629" width="0.1318%" height="15" fill="rgb(250,143,38)" fg:x="731" fg:w="1"/><text x="96.5609%" y="639.50"></text></g><g><title>[libc.so.6] (1 samples, 0.13%)</title><rect x="96.3109%" y="613" width="0.1318%" height="15" fill="rgb(248,25,0)" fg:x="731" fg:w="1"/><text x="96.5609%" y="623.50"></text></g><g><title>fuser::mount2 (382 samples, 50.33%)</title><rect x="46.7721%" y="773" width="50.3294%" height="15" fill="rgb(206,152,27)" fg:x="355" fg:w="382"/><text x="47.0221%" y="783.50">fuser::mount2</text></g><g><title>fuser::session::Session&lt;FS&gt;::new (19 samples, 2.50%)</title><rect x="94.5982%" y="757" width="2.5033%" height="15" fill="rgb(240,77,30)" fg:x="718" fg:w="19"/><text x="94.8482%" y="767.50">fu..</text></g><g><title>fuser::mnt::fuse3::Mount::new (18 samples, 2.37%)</title><rect x="94.7299%" y="741" width="2.3715%" height="15" fill="rgb(231,5,3)" fg:x="719" fg:w="18"/><text x="94.9799%" y="751.50">fu..</text></g><g><title>fuser::mnt::with_fuse_args (18 samples, 2.37%)</title><rect x="94.7299%" y="725" width="2.3715%" height="15" fill="rgb(207,226,32)" fg:x="719" fg:w="18"/><text x="94.9799%" y="735.50">fu..</text></g><g><title>fuser::mnt::fuse3::Mount::new::_{{closure}} (18 samples, 2.37%)</title><rect x="94.7299%" y="709" width="2.3715%" height="15" fill="rgb(222,207,47)" fg:x="719" fg:w="18"/><text x="94.9799%" y="719.50">fu..</text></g><g><title>fuse_session_mount (18 samples, 2.37%)</title><rect x="94.7299%" y="693" width="2.3715%" height="15" fill="rgb(229,115,45)" fg:x="719" fg:w="18"/><text x="94.9799%" y="703.50">fu..</text></g><g><title>[libfuse3.so.3.16.2] (18 samples, 2.37%)</title><rect x="94.7299%" y="677" width="2.3715%" height="15" fill="rgb(224,191,6)" fg:x="719" fg:w="18"/><text x="94.9799%" y="687.50">[l..</text></g><g><title>[libfuse3.so.3.16.2] (17 samples, 2.24%)</title><rect x="94.8617%" y="661" width="2.2398%" height="15" fill="rgb(230,227,24)" fg:x="720" fg:w="17"/><text x="95.1117%" y="671.50">[..</text></g><g><title>recvmsg (5 samples, 0.66%)</title><rect x="96.4427%" y="645" width="0.6588%" height="15" fill="rgb(228,80,19)" fg:x="732" fg:w="5"/><text x="96.6927%" y="655.50"></text></g><g><title>[libc.so.6] (3 samples, 0.40%)</title><rect x="96.7062%" y="629" width="0.3953%" height="15" fill="rgb(247,229,0)" fg:x="734" fg:w="3"/><text x="96.9562%" y="639.50"></text></g><g><title>&lt;serde_yaml::de::Deserializer as serde::de::Deserializer&gt;::deserialize_struct::_{{closure}} (1 samples, 0.13%)</title><rect x="97.1014%" y="709" width="0.1318%" height="15" fill="rgb(237,194,15)" fg:x="737" fg:w="1"/><text x="97.3514%" y="719.50"></text></g><g><title>&lt;&amp;mut serde_yaml::de::DeserializerFromEvents as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.13%)</title><rect x="97.1014%" y="693" width="0.1318%" height="15" fill="rgb(219,203,20)" fg:x="737" fg:w="1"/><text x="97.3514%" y="703.50"></text></g><g><title>&lt;&amp;mut serde_yaml::de::DeserializerFromEvents as serde::de::Deserializer&gt;::deserialize_map (1 samples, 0.13%)</title><rect x="97.1014%" y="677" width="0.1318%" height="15" fill="rgb(234,128,8)" fg:x="737" fg:w="1"/><text x="97.3514%" y="687.50"></text></g><g><title>serde_yaml::de::DeserializerFromEvents::visit_mapping (1 samples, 0.13%)</title><rect x="97.1014%" y="661" width="0.1318%" height="15" fill="rgb(248,202,8)" fg:x="737" fg:w="1"/><text x="97.3514%" y="671.50"></text></g><g><title>serde_yaml::de::DeserializerFromEvents::recursion_check (1 samples, 0.13%)</title><rect x="97.1014%" y="645" width="0.1318%" height="15" fill="rgb(206,104,37)" fg:x="737" fg:w="1"/><text x="97.3514%" y="655.50"></text></g><g><title>serde_yaml::de::DeserializerFromEvents::visit_mapping::_{{closure}} (1 samples, 0.13%)</title><rect x="97.1014%" y="629" width="0.1318%" height="15" fill="rgb(223,8,27)" fg:x="737" fg:w="1"/><text x="97.3514%" y="639.50"></text></g><g><title>&lt;shmr2::config::_::&lt;impl serde::de::Deserialize for shmr2::config::ShmrFsConfig&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.13%)</title><rect x="97.1014%" y="613" width="0.1318%" height="15" fill="rgb(216,217,28)" fg:x="737" fg:w="1"/><text x="97.3514%" y="623.50"></text></g><g><title>&lt;&amp;mut A as serde::de::MapAccess&gt;::next_value (1 samples, 0.13%)</title><rect x="97.1014%" y="597" width="0.1318%" height="15" fill="rgb(249,199,1)" fg:x="737" fg:w="1"/><text x="97.3514%" y="607.50"></text></g><g><title>serde::de::MapAccess::next_value (1 samples, 0.13%)</title><rect x="97.1014%" y="581" width="0.1318%" height="15" fill="rgb(240,85,17)" fg:x="737" fg:w="1"/><text x="97.3514%" y="591.50"></text></g><g><title>&lt;serde_yaml::de::MapAccess as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.13%)</title><rect x="97.1014%" y="565" width="0.1318%" height="15" fill="rgb(206,108,45)" fg:x="737" fg:w="1"/><text x="97.3514%" y="575.50"></text></g><g><title>serde_yaml::de::from_str (3 samples, 0.40%)</title><rect x="97.1014%" y="773" width="0.3953%" height="15" fill="rgb(245,210,41)" fg:x="737" fg:w="3"/><text x="97.3514%" y="783.50"></text></g><g><title>shmr2::config::_::&lt;impl serde::de::Deserialize for shmr2::config::ShmrFsConfig&gt;::deserialize (3 samples, 0.40%)</title><rect x="97.1014%" y="757" width="0.3953%" height="15" fill="rgb(206,13,37)" fg:x="737" fg:w="3"/><text x="97.3514%" y="767.50"></text></g><g><title>&lt;serde_yaml::de::Deserializer as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.40%)</title><rect x="97.1014%" y="741" width="0.3953%" height="15" fill="rgb(250,61,18)" fg:x="737" fg:w="3"/><text x="97.3514%" y="751.50"></text></g><g><title>serde_yaml::de::Deserializer::de (3 samples, 0.40%)</title><rect x="97.1014%" y="725" width="0.3953%" height="15" fill="rgb(235,172,48)" fg:x="737" fg:w="3"/><text x="97.3514%" y="735.50"></text></g><g><title>serde_yaml::loader::Loader::next_document (2 samples, 0.26%)</title><rect x="97.2332%" y="709" width="0.2635%" height="15" fill="rgb(249,201,17)" fg:x="738" fg:w="2"/><text x="97.4832%" y="719.50"></text></g><g><title>serde_yaml::libyaml::parser::Parser::next (1 samples, 0.13%)</title><rect x="97.3650%" y="693" width="0.1318%" height="15" fill="rgb(219,208,6)" fg:x="739" fg:w="1"/><text x="97.6150%" y="703.50"></text></g><g><title>unsafe_libyaml::parser::yaml_parser_parse (1 samples, 0.13%)</title><rect x="97.3650%" y="677" width="0.1318%" height="15" fill="rgb(248,31,23)" fg:x="739" fg:w="1"/><text x="97.6150%" y="687.50"></text></g><g><title>unsafe_libyaml::parser::yaml_parser_state_machine (1 samples, 0.13%)</title><rect x="97.3650%" y="661" width="0.1318%" height="15" fill="rgb(245,15,42)" fg:x="739" fg:w="1"/><text x="97.6150%" y="671.50"></text></g><g><title>unsafe_libyaml::parser::yaml_parser_parse_block_mapping_key (1 samples, 0.13%)</title><rect x="97.3650%" y="645" width="0.1318%" height="15" fill="rgb(222,217,39)" fg:x="739" fg:w="1"/><text x="97.6150%" y="655.50"></text></g><g><title>unsafe_libyaml::parser::PEEK_TOKEN (1 samples, 0.13%)</title><rect x="97.3650%" y="629" width="0.1318%" height="15" fill="rgb(210,219,27)" fg:x="739" fg:w="1"/><text x="97.6150%" y="639.50"></text></g><g><title>unsafe_libyaml::scanner::yaml_parser_fetch_more_tokens (1 samples, 0.13%)</title><rect x="97.3650%" y="613" width="0.1318%" height="15" fill="rgb(252,166,36)" fg:x="739" fg:w="1"/><text x="97.6150%" y="623.50"></text></g><g><title>unsafe_libyaml::scanner::yaml_parser_fetch_next_token (1 samples, 0.13%)</title><rect x="97.3650%" y="597" width="0.1318%" height="15" fill="rgb(245,132,34)" fg:x="739" fg:w="1"/><text x="97.6150%" y="607.50"></text></g><g><title>unsafe_libyaml::scanner::yaml_parser_fetch_plain_scalar (1 samples, 0.13%)</title><rect x="97.3650%" y="581" width="0.1318%" height="15" fill="rgb(236,54,3)" fg:x="739" fg:w="1"/><text x="97.6150%" y="591.50"></text></g><g><title>unsafe_libyaml::scanner::yaml_parser_scan_plain_scalar (1 samples, 0.13%)</title><rect x="97.3650%" y="565" width="0.1318%" height="15" fill="rgb(241,173,43)" fg:x="739" fg:w="1"/><text x="97.6150%" y="575.50"></text></g><g><title>&lt;dashmap::DashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (1 samples, 0.13%)</title><rect x="97.4967%" y="757" width="0.1318%" height="15" fill="rgb(215,190,9)" fg:x="740" fg:w="1"/><text x="97.7467%" y="767.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::with_hasher (1 samples, 0.13%)</title><rect x="97.4967%" y="741" width="0.1318%" height="15" fill="rgb(242,101,16)" fg:x="740" fg:w="1"/><text x="97.7467%" y="751.50"></text></g><g><title>dashmap::DashMap&lt;K,V,S&gt;::with_capacity_and_hasher (1 samples, 0.13%)</title><rect x="97.4967%" y="725" width="0.1318%" height="15" fill="rgb(223,190,21)" fg:x="740" fg:w="1"/><text x="97.7467%" y="735.50"></text></g><g><title>dashmap::default_shard_amount (1 samples, 0.13%)</title><rect x="97.4967%" y="709" width="0.1318%" height="15" fill="rgb(215,228,25)" fg:x="740" fg:w="1"/><text x="97.7467%" y="719.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.13%)</title><rect x="97.4967%" y="693" width="0.1318%" height="15" fill="rgb(225,36,22)" fg:x="740" fg:w="1"/><text x="97.7467%" y="703.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.13%)</title><rect x="97.4967%" y="677" width="0.1318%" height="15" fill="rgb(251,106,46)" fg:x="740" fg:w="1"/><text x="97.7467%" y="687.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.13%)</title><rect x="97.4967%" y="661" width="0.1318%" height="15" fill="rgb(208,90,1)" fg:x="740" fg:w="1"/><text x="97.7467%" y="671.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.13%)</title><rect x="97.4967%" y="645" width="0.1318%" height="15" fill="rgb(243,10,4)" fg:x="740" fg:w="1"/><text x="97.7467%" y="655.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.13%)</title><rect x="97.4967%" y="629" width="0.1318%" height="15" fill="rgb(212,137,27)" fg:x="740" fg:w="1"/><text x="97.7467%" y="639.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (1 samples, 0.13%)</title><rect x="97.4967%" y="613" width="0.1318%" height="15" fill="rgb(231,220,49)" fg:x="740" fg:w="1"/><text x="97.7467%" y="623.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::_{{closure}} (1 samples, 0.13%)</title><rect x="97.4967%" y="597" width="0.1318%" height="15" fill="rgb(237,96,20)" fg:x="740" fg:w="1"/><text x="97.7467%" y="607.50"></text></g><g><title>dashmap::default_shard_amount::_{{closure}} (1 samples, 0.13%)</title><rect x="97.4967%" y="581" width="0.1318%" height="15" fill="rgb(239,229,30)" fg:x="740" fg:w="1"/><text x="97.7467%" y="591.50"></text></g><g><title>std::thread::available_parallelism (1 samples, 0.13%)</title><rect x="97.4967%" y="565" width="0.1318%" height="15" fill="rgb(219,65,33)" fg:x="740" fg:w="1"/><text x="97.7467%" y="575.50"></text></g><g><title>std::sys::pal::unix::thread::available_parallelism (1 samples, 0.13%)</title><rect x="97.4967%" y="549" width="0.1318%" height="15" fill="rgb(243,134,7)" fg:x="740" fg:w="1"/><text x="97.7467%" y="559.50"></text></g><g><title>std::sys::pal::unix::thread::cgroups::quota (1 samples, 0.13%)</title><rect x="97.4967%" y="533" width="0.1318%" height="15" fill="rgb(216,177,54)" fg:x="740" fg:w="1"/><text x="97.7467%" y="543.50"></text></g><g><title>std::sys::pal::unix::thread::cgroups::quota_v2 (1 samples, 0.13%)</title><rect x="97.4967%" y="517" width="0.1318%" height="15" fill="rgb(211,160,20)" fg:x="740" fg:w="1"/><text x="97.7467%" y="527.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (1 samples, 0.13%)</title><rect x="97.4967%" y="501" width="0.1318%" height="15" fill="rgb(239,85,39)" fg:x="740" fg:w="1"/><text x="97.7467%" y="511.50"></text></g><g><title>core::num::&lt;impl core::str::traits::FromStr for usize&gt;::from_str (1 samples, 0.13%)</title><rect x="97.4967%" y="485" width="0.1318%" height="15" fill="rgb(232,125,22)" fg:x="740" fg:w="1"/><text x="97.7467%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (1 samples, 0.13%)</title><rect x="97.4967%" y="469" width="0.1318%" height="15" fill="rgb(244,57,34)" fg:x="740" fg:w="1"/><text x="97.7467%" y="479.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_str_radix (1 samples, 0.13%)</title><rect x="97.4967%" y="453" width="0.1318%" height="15" fill="rgb(214,203,32)" fg:x="740" fg:w="1"/><text x="97.7467%" y="463.50"></text></g><g><title>unsafe_libyaml::parser::yaml_parser_parse_block_mapping_key (2 samples, 0.26%)</title><rect x="97.6285%" y="613" width="0.2635%" height="15" fill="rgb(207,58,43)" fg:x="741" fg:w="2"/><text x="97.8785%" y="623.50"></text></g><g><title>unsafe_libyaml::parser::PEEK_TOKEN (2 samples, 0.26%)</title><rect x="97.6285%" y="597" width="0.2635%" height="15" fill="rgb(215,193,15)" fg:x="741" fg:w="2"/><text x="97.8785%" y="607.50"></text></g><g><title>unsafe_libyaml::scanner::yaml_parser_fetch_more_tokens (2 samples, 0.26%)</title><rect x="97.6285%" y="581" width="0.2635%" height="15" fill="rgb(232,15,44)" fg:x="741" fg:w="2"/><text x="97.8785%" y="591.50"></text></g><g><title>unsafe_libyaml::scanner::yaml_parser_stale_simple_keys (1 samples, 0.13%)</title><rect x="97.7602%" y="565" width="0.1318%" height="15" fill="rgb(212,3,48)" fg:x="742" fg:w="1"/><text x="98.0102%" y="575.50"></text></g><g><title>_start (394 samples, 51.91%)</title><rect x="46.1133%" y="885" width="51.9104%" height="15" fill="rgb(218,128,7)" fg:x="350" fg:w="394"/><text x="46.3633%" y="895.50">_start</text></g><g><title>__libc_start_main (394 samples, 51.91%)</title><rect x="46.1133%" y="869" width="51.9104%" height="15" fill="rgb(226,216,39)" fg:x="350" fg:w="394"/><text x="46.3633%" y="879.50">__libc_start_main</text></g><g><title>[libc.so.6] (394 samples, 51.91%)</title><rect x="46.1133%" y="853" width="51.9104%" height="15" fill="rgb(243,47,51)" fg:x="350" fg:w="394"/><text x="46.3633%" y="863.50">[libc.so.6]</text></g><g><title>main (392 samples, 51.65%)</title><rect x="46.3768%" y="837" width="51.6469%" height="15" fill="rgb(241,183,40)" fg:x="352" fg:w="392"/><text x="46.6268%" y="847.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (390 samples, 51.38%)</title><rect x="46.6403%" y="821" width="51.3834%" height="15" fill="rgb(231,217,32)" fg:x="354" fg:w="390"/><text x="46.8903%" y="831.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (390 samples, 51.38%)</title><rect x="46.6403%" y="805" width="51.3834%" height="15" fill="rgb(229,61,38)" fg:x="354" fg:w="390"/><text x="46.8903%" y="815.50">core::ops::function::FnOnce::call_once</text></g><g><title>shmrd::main (390 samples, 51.38%)</title><rect x="46.6403%" y="789" width="51.3834%" height="15" fill="rgb(225,210,5)" fg:x="354" fg:w="390"/><text x="46.8903%" y="799.50">shmrd::main</text></g><g><title>shmr2::ShmrFs::new (4 samples, 0.53%)</title><rect x="97.4967%" y="773" width="0.5270%" height="15" fill="rgb(231,79,45)" fg:x="740" fg:w="4"/><text x="97.7467%" y="783.50"></text></g><g><title>shmr2::databunny::DataBunny&lt;K,V&gt;::open (3 samples, 0.40%)</title><rect x="97.6285%" y="757" width="0.3953%" height="15" fill="rgb(224,100,7)" fg:x="741" fg:w="3"/><text x="97.8785%" y="767.50"></text></g><g><title>serde_yaml::de::from_slice (3 samples, 0.40%)</title><rect x="97.6285%" y="741" width="0.3953%" height="15" fill="rgb(241,198,18)" fg:x="741" fg:w="3"/><text x="97.8785%" y="751.50"></text></g><g><title>shmr2::types::_::&lt;impl serde::de::Deserialize for shmr2::types::SuperblockEntry&gt;::deserialize (3 samples, 0.40%)</title><rect x="97.6285%" y="725" width="0.3953%" height="15" fill="rgb(252,97,53)" fg:x="741" fg:w="3"/><text x="97.8785%" y="735.50"></text></g><g><title>&lt;serde_yaml::de::Deserializer as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 0.40%)</title><rect x="97.6285%" y="709" width="0.3953%" height="15" fill="rgb(220,88,7)" fg:x="741" fg:w="3"/><text x="97.8785%" y="719.50"></text></g><g><title>serde_yaml::de::Deserializer::de (3 samples, 0.40%)</title><rect x="97.6285%" y="693" width="0.3953%" height="15" fill="rgb(213,176,14)" fg:x="741" fg:w="3"/><text x="97.8785%" y="703.50"></text></g><g><title>serde_yaml::loader::Loader::next_document (3 samples, 0.40%)</title><rect x="97.6285%" y="677" width="0.3953%" height="15" fill="rgb(246,73,7)" fg:x="741" fg:w="3"/><text x="97.8785%" y="687.50"></text></g><g><title>serde_yaml::libyaml::parser::Parser::next (3 samples, 0.40%)</title><rect x="97.6285%" y="661" width="0.3953%" height="15" fill="rgb(245,64,36)" fg:x="741" fg:w="3"/><text x="97.8785%" y="671.50"></text></g><g><title>unsafe_libyaml::parser::yaml_parser_parse (3 samples, 0.40%)</title><rect x="97.6285%" y="645" width="0.3953%" height="15" fill="rgb(245,80,10)" fg:x="741" fg:w="3"/><text x="97.8785%" y="655.50"></text></g><g><title>unsafe_libyaml::parser::yaml_parser_state_machine (3 samples, 0.40%)</title><rect x="97.6285%" y="629" width="0.3953%" height="15" fill="rgb(232,107,50)" fg:x="741" fg:w="3"/><text x="97.8785%" y="639.50"></text></g><g><title>unsafe_libyaml::parser::yaml_parser_parse_indentless_sequence_entry (1 samples, 0.13%)</title><rect x="97.8920%" y="613" width="0.1318%" height="15" fill="rgb(253,3,0)" fg:x="743" fg:w="1"/><text x="98.1420%" y="623.50"></text></g><g><title>unsafe_libyaml::parser::PEEK_TOKEN (1 samples, 0.13%)</title><rect x="97.8920%" y="597" width="0.1318%" height="15" fill="rgb(212,99,53)" fg:x="743" fg:w="1"/><text x="98.1420%" y="607.50"></text></g><g><title>unsafe_libyaml::scanner::yaml_parser_fetch_more_tokens (1 samples, 0.13%)</title><rect x="97.8920%" y="581" width="0.1318%" height="15" fill="rgb(249,111,54)" fg:x="743" fg:w="1"/><text x="98.1420%" y="591.50"></text></g><g><title>unsafe_libyaml::scanner::yaml_parser_fetch_next_token (1 samples, 0.13%)</title><rect x="97.8920%" y="565" width="0.1318%" height="15" fill="rgb(249,55,30)" fg:x="743" fg:w="1"/><text x="98.1420%" y="575.50"></text></g><g><title>unsafe_libyaml::scanner::yaml_parser_fetch_plain_scalar (1 samples, 0.13%)</title><rect x="97.8920%" y="549" width="0.1318%" height="15" fill="rgb(237,47,42)" fg:x="743" fg:w="1"/><text x="98.1420%" y="559.50"></text></g><g><title>unsafe_libyaml::scanner::yaml_parser_scan_plain_scalar (1 samples, 0.13%)</title><rect x="97.8920%" y="533" width="0.1318%" height="15" fill="rgb(211,20,18)" fg:x="743" fg:w="1"/><text x="98.1420%" y="543.50"></text></g><g><title>fsync (5 samples, 0.66%)</title><rect x="98.0237%" y="885" width="0.6588%" height="15" fill="rgb(231,203,46)" fg:x="744" fg:w="5"/><text x="98.2737%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.13%)</title><rect x="98.6825%" y="885" width="0.1318%" height="15" fill="rgb(237,142,3)" fg:x="749" fg:w="1"/><text x="98.9325%" y="895.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 0.13%)</title><rect x="98.6825%" y="869" width="0.1318%" height="15" fill="rgb(241,107,1)" fg:x="749" fg:w="1"/><text x="98.9325%" y="879.50"></text></g><g><title>malloc (1 samples, 0.13%)</title><rect x="98.8142%" y="885" width="0.1318%" height="15" fill="rgb(229,83,13)" fg:x="750" fg:w="1"/><text x="99.0642%" y="895.50"></text></g><g><title>realloc (1 samples, 0.13%)</title><rect x="98.9460%" y="885" width="0.1318%" height="15" fill="rgb(241,91,40)" fg:x="751" fg:w="1"/><text x="99.1960%" y="895.50"></text></g><g><title>std::fs::File::sync_all (2 samples, 0.26%)</title><rect x="99.0777%" y="885" width="0.2635%" height="15" fill="rgb(225,3,45)" fg:x="752" fg:w="2"/><text x="99.3277%" y="895.50"></text></g><g><title>std::os::unix::fs::FileExt::write_all_at (1 samples, 0.13%)</title><rect x="99.3412%" y="885" width="0.1318%" height="15" fill="rgb(244,223,14)" fg:x="754" fg:w="1"/><text x="99.5912%" y="895.50"></text></g><g><title>std::path::Path::_join (3 samples, 0.40%)</title><rect x="99.4730%" y="885" width="0.3953%" height="15" fill="rgb(224,124,37)" fg:x="755" fg:w="3"/><text x="99.7230%" y="895.50"></text></g><g><title>all (759 samples, 100%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(251,171,30)" fg:x="0" fg:w="759"/><text x="0.2500%" y="927.50"></text></g><g><title>shmrd (759 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(236,46,54)" fg:x="0" fg:w="759"/><text x="0.2500%" y="911.50">shmrd</text></g><g><title>unsafe_libyaml::parser::yaml_parser_parse_flow_mapping_key (1 samples, 0.13%)</title><rect x="99.8682%" y="885" width="0.1318%" height="15" fill="rgb(245,213,5)" fg:x="758" fg:w="1"/><text x="100.1182%" y="895.50"></text></g></svg></svg>